{"ast":null,"code":"var _jsxFileName = \"/Users/siteoptz/siteoptz-scraping/src/contexts/StripeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { pricingPlans, stripeConfig } from '../../pricing-plans';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeContext = /*#__PURE__*/createContext();\nexport const useStripe = () => {\n  _s();\n  const context = useContext(StripeContext);\n  if (!context) {\n    throw new Error('useStripe must be used within a StripeProvider');\n  }\n  return context;\n};\n_s(useStripe, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const StripeProvider = ({\n  children\n}) => {\n  const stripePromise = loadStripe(stripeConfig.publishableKey);\n  const createCheckoutSession = async (priceId, planName) => {\n    try {\n      const stripe = await stripePromise;\n      if (!stripe) {\n        throw new Error('Stripe failed to load');\n      }\n\n      // Create checkout session on your backend\n      const response = await fetch('/api/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          priceId,\n          planName,\n          successUrl: `${window.location.origin}/dashboard/success`,\n          cancelUrl: `${window.location.origin}/dashboard/${planName.toLowerCase()}`\n        })\n      });\n      const session = await response.json();\n\n      // Redirect to Stripe Checkout\n      const {\n        error\n      } = await stripe.redirectToCheckout({\n        sessionId: session.id\n      });\n      if (error) {\n        console.error('Error redirecting to checkout:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error creating checkout session:', error);\n      throw error;\n    }\n  };\n  const openUpgradeModal = async targetPlan => {\n    try {\n      const plan = pricingPlans[targetPlan];\n      if (!plan || !plan.stripePriceId) {\n        // Handle enterprise custom pricing\n        window.open('/contact-sales', '_blank');\n        return;\n      }\n      await createCheckoutSession(plan.stripePriceId, targetPlan);\n    } catch (error) {\n      console.error('Error opening upgrade modal:', error);\n      // Fallback to contact sales\n      window.open('/contact-sales', '_blank');\n    }\n  };\n  const value = {\n    stripePromise,\n    createCheckoutSession,\n    openUpgradeModal\n  };\n  return /*#__PURE__*/_jsxDEV(StripeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_c = StripeProvider;\nvar _c;\n$RefreshReg$(_c, \"StripeProvider\");","map":{"version":3,"names":["React","createContext","useContext","loadStripe","pricingPlans","stripeConfig","jsxDEV","_jsxDEV","StripeContext","useStripe","_s","context","Error","StripeProvider","children","stripePromise","publishableKey","createCheckoutSession","priceId","planName","stripe","response","fetch","method","headers","body","JSON","stringify","successUrl","window","location","origin","cancelUrl","toLowerCase","session","json","error","redirectToCheckout","sessionId","id","console","openUpgradeModal","targetPlan","plan","stripePriceId","open","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siteoptz/siteoptz-scraping/src/contexts/StripeContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { pricingPlans, stripeConfig } from '../../pricing-plans';\n\nconst StripeContext = createContext();\n\nexport const useStripe = () => {\n  const context = useContext(StripeContext);\n  if (!context) {\n    throw new Error('useStripe must be used within a StripeProvider');\n  }\n  return context;\n};\n\nexport const StripeProvider = ({ children }) => {\n  const stripePromise = loadStripe(stripeConfig.publishableKey);\n\n  const createCheckoutSession = async (priceId, planName) => {\n    try {\n      const stripe = await stripePromise;\n      \n      if (!stripe) {\n        throw new Error('Stripe failed to load');\n      }\n\n      // Create checkout session on your backend\n      const response = await fetch('/api/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          priceId,\n          planName,\n          successUrl: `${window.location.origin}/dashboard/success`,\n          cancelUrl: `${window.location.origin}/dashboard/${planName.toLowerCase()}`\n        }),\n      });\n\n      const session = await response.json();\n\n      // Redirect to Stripe Checkout\n      const { error } = await stripe.redirectToCheckout({\n        sessionId: session.id,\n      });\n\n      if (error) {\n        console.error('Error redirecting to checkout:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error creating checkout session:', error);\n      throw error;\n    }\n  };\n\n  const openUpgradeModal = async (targetPlan) => {\n    try {\n      const plan = pricingPlans[targetPlan];\n      \n      if (!plan || !plan.stripePriceId) {\n        // Handle enterprise custom pricing\n        window.open('/contact-sales', '_blank');\n        return;\n      }\n\n      await createCheckoutSession(plan.stripePriceId, targetPlan);\n    } catch (error) {\n      console.error('Error opening upgrade modal:', error);\n      // Fallback to contact sales\n      window.open('/contact-sales', '_blank');\n    }\n  };\n\n  const value = {\n    stripePromise,\n    createCheckoutSession,\n    openUpgradeModal\n  };\n\n  return (\n    <StripeContext.Provider value={value}>\n      {children}\n    </StripeContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}