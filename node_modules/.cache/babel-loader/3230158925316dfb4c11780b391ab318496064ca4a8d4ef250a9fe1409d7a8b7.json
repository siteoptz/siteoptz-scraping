{"ast":null,"code":"// Cyfe Dashboard Integration Service\nimport { pricingPlans } from '../../pricing-plans';\nclass CyfeService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_CYFE_BASE_URL || 'https://app.cyfe.com';\n    this.apiKey = process.env.REACT_APP_CYFE_API_KEY;\n    this.whiteLabelDomain = process.env.REACT_APP_CYFE_WHITELABEL_DOMAIN;\n  }\n\n  // Dashboard configuration for each plan tier\n  getDashboardConfig(planId) {\n    const planConfigs = {\n      free: {\n        dashboards: [{\n          id: 'basic_analytics',\n          name: 'Basic Analytics',\n          url: `${this.baseUrl}/dashboards/basic_analytics`,\n          description: 'Basic usage statistics and performance metrics',\n          widgets: ['usage_stats', 'request_timeline', 'error_rates']\n        }],\n        maxDashboards: 1,\n        maxUsers: 1,\n        features: ['basic_widgets', 'standard_refresh']\n      },\n      starter: {\n        dashboards: [{\n          id: 'advanced_analytics',\n          name: 'Advanced Analytics',\n          url: `${this.baseUrl}/dashboards/advanced_analytics`,\n          description: 'Detailed analytics with API usage and scheduling',\n          widgets: ['usage_stats', 'api_calls', 'scheduled_jobs', 'performance_metrics']\n        }, {\n          id: 'api_monitoring',\n          name: 'API Monitoring',\n          url: `${this.baseUrl}/dashboards/api_monitoring`,\n          description: 'Monitor API calls, response times, and errors',\n          widgets: ['api_requests', 'response_times', 'error_tracking', 'rate_limits']\n        }],\n        maxDashboards: 2,\n        maxUsers: 3,\n        features: ['custom_widgets', 'real_time_data', 'data_export']\n      },\n      pro: {\n        dashboards: [{\n          id: 'comprehensive_analytics',\n          name: 'Comprehensive Analytics',\n          url: `${this.baseUrl}/dashboards/comprehensive_analytics`,\n          description: 'Full analytics suite with team collaboration',\n          widgets: ['usage_stats', 'team_activity', 'project_metrics', 'cost_analysis']\n        }, {\n          id: 'team_dashboard',\n          name: 'Team Dashboard',\n          url: `${this.baseUrl}/dashboards/team_dashboard`,\n          description: 'Team collaboration and project management',\n          widgets: ['team_performance', 'project_status', 'collaboration_metrics']\n        }, {\n          id: 'advanced_monitoring',\n          name: 'Advanced Monitoring',\n          url: `${this.baseUrl}/dashboards/advanced_monitoring`,\n          description: 'Advanced system monitoring and alerts',\n          widgets: ['system_health', 'alert_management', 'performance_trends']\n        }, {\n          id: 'custom_reports',\n          name: 'Custom Reports',\n          url: `${this.baseUrl}/dashboards/custom_reports`,\n          description: 'Custom reporting and data visualization',\n          widgets: ['custom_charts', 'report_builder', 'data_export']\n        }],\n        maxDashboards: 4,\n        maxUsers: 10,\n        features: ['custom_dashboards', 'advanced_widgets', 'scheduled_reports', 'team_collaboration']\n      },\n      enterprise: {\n        dashboards: [{\n          id: 'enterprise_overview',\n          name: 'Enterprise Overview',\n          url: `${this.baseUrl}/dashboards/enterprise_overview`,\n          description: 'Executive dashboard with key performance indicators',\n          widgets: ['kpi_overview', 'business_metrics', 'executive_summary']\n        }, {\n          id: 'operational_dashboard',\n          name: 'Operational Dashboard',\n          url: `${this.baseUrl}/dashboards/operational_dashboard`,\n          description: 'Real-time operational monitoring and management',\n          widgets: ['system_status', 'alert_center', 'performance_monitoring']\n        }, {\n          id: 'compliance_dashboard',\n          name: 'Compliance Dashboard',\n          url: `${this.baseUrl}/dashboards/compliance_dashboard`,\n          description: 'Compliance monitoring and audit trails',\n          widgets: ['compliance_status', 'audit_logs', 'security_metrics']\n        }, {\n          id: 'custom_business_dashboard',\n          name: 'Custom Business Dashboard',\n          url: `${this.baseUrl}/dashboards/custom_business`,\n          description: 'Custom dashboard tailored to business needs',\n          widgets: ['custom_kpis', 'business_intelligence', 'custom_analytics']\n        }, {\n          id: 'multi_region_dashboard',\n          name: 'Multi-Region Dashboard',\n          url: `${this.baseUrl}/dashboards/multi_region`,\n          description: 'Global performance and regional analytics',\n          widgets: ['regional_performance', 'global_metrics', 'latency_monitoring']\n        }],\n        maxDashboards: -1,\n        // Unlimited\n        maxUsers: -1,\n        // Unlimited\n        features: ['unlimited_dashboards', 'custom_branding', 'sla_monitoring', 'compliance_tools', 'multi_region_support']\n      }\n    };\n    return planConfigs[planId] || planConfigs.free;\n  }\n\n  // Generate authenticated dashboard URL\n  generateDashboardUrl(dashboardId, userId, planId) {\n    const config = this.getDashboardConfig(planId);\n    const dashboard = config.dashboards.find(d => d.id === dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard ${dashboardId} not available for plan ${planId}`);\n    }\n\n    // For white-label setup, use your custom domain\n    const baseUrl = this.whiteLabelDomain || this.baseUrl;\n\n    // Generate secure token for dashboard access\n    const token = this.generateAccessToken(userId, planId, dashboardId);\n    return `${baseUrl}/embed/${dashboardId}?token=${token}&user=${userId}&plan=${planId}`;\n  }\n\n  // Generate access token for dashboard authentication\n  generateAccessToken(userId, planId, dashboardId) {\n    // In a real implementation, this would be generated on your backend\n    // and validated by Cyfe's white-label system\n    const payload = {\n      userId,\n      planId,\n      dashboardId,\n      timestamp: Date.now(),\n      expires: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\n    };\n\n    // This should be signed with your secret key\n    return btoa(JSON.stringify(payload));\n  }\n\n  // Check if user has access to a specific dashboard\n  hasDashboardAccess(userId, planId, dashboardId) {\n    const config = this.getDashboardConfig(planId);\n    return config.dashboards.some(dashboard => dashboard.id === dashboardId);\n  }\n\n  // Get available dashboards for a plan\n  getAvailableDashboards(planId) {\n    const config = this.getDashboardConfig(planId);\n    return config.dashboards;\n  }\n\n  // Get dashboard limits for a plan\n  getDashboardLimits(planId) {\n    const config = this.getDashboardConfig(planId);\n    return {\n      maxDashboards: config.maxDashboards,\n      maxUsers: config.maxUsers,\n      features: config.features\n    };\n  }\n\n  // Push data to Cyfe dashboard (using Cyfe Push API)\n  async pushDataToDashboard(dashboardId, widgetId, data) {\n    const endpoint = `${this.baseUrl}/api/push/${dashboardId}/${widgetId}`;\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          data: data,\n          onduplicate: 'update',\n          color: '#3b82f6',\n          type: 'line'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to push data: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error pushing data to Cyfe:', error);\n      throw error;\n    }\n  }\n\n  // Get upgrade suggestions based on current usage\n  getUpgradeSuggestions(currentPlan, usage) {\n    var _pricingPlans$current;\n    const suggestions = [];\n    const config = this.getDashboardConfig(currentPlan);\n    const nextPlan = (_pricingPlans$current = pricingPlans[currentPlan]) === null || _pricingPlans$current === void 0 ? void 0 : _pricingPlans$current.upgradeTo;\n    if (!nextPlan) return suggestions;\n\n    // Check dashboard usage\n    if (config.maxDashboards > 0 && usage.dashboardCount >= config.maxDashboards) {\n      suggestions.push({\n        type: 'dashboard_limit',\n        message: `You've reached your dashboard limit (${config.maxDashboards}). Upgrade to ${nextPlan} for more dashboards.`,\n        priority: 'high'\n      });\n    }\n\n    // Check user limit\n    if (config.maxUsers > 0 && usage.userCount >= config.maxUsers) {\n      suggestions.push({\n        type: 'user_limit',\n        message: `You've reached your user limit (${config.maxUsers}). Upgrade to ${nextPlan} for more users.`,\n        priority: 'high'\n      });\n    }\n\n    // Check feature usage\n    if (usage.requiresAdvancedFeatures && !config.features.includes('custom_dashboards')) {\n      suggestions.push({\n        type: 'feature_limit',\n        message: 'You need advanced features like custom dashboards. Upgrade to access more capabilities.',\n        priority: 'medium'\n      });\n    }\n    return suggestions;\n  }\n\n  // Validate dashboard access token\n  validateAccessToken(token) {\n    try {\n      const payload = JSON.parse(atob(token));\n\n      // Check if token is expired\n      if (Date.now() > payload.expires) {\n        return {\n          valid: false,\n          reason: 'expired'\n        };\n      }\n      return {\n        valid: true,\n        userId: payload.userId,\n        planId: payload.planId,\n        dashboardId: payload.dashboardId\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        reason: 'invalid'\n      };\n    }\n  }\n}\nexport default new CyfeService();","map":{"version":3,"names":["pricingPlans","CyfeService","constructor","baseUrl","process","env","REACT_APP_CYFE_BASE_URL","apiKey","REACT_APP_CYFE_API_KEY","whiteLabelDomain","REACT_APP_CYFE_WHITELABEL_DOMAIN","getDashboardConfig","planId","planConfigs","free","dashboards","id","name","url","description","widgets","maxDashboards","maxUsers","features","starter","pro","enterprise","generateDashboardUrl","dashboardId","userId","config","dashboard","find","d","Error","token","generateAccessToken","payload","timestamp","Date","now","expires","btoa","JSON","stringify","hasDashboardAccess","some","getAvailableDashboards","getDashboardLimits","pushDataToDashboard","widgetId","data","endpoint","response","fetch","method","headers","body","onduplicate","color","type","ok","statusText","json","error","console","getUpgradeSuggestions","currentPlan","usage","_pricingPlans$current","suggestions","nextPlan","upgradeTo","dashboardCount","push","message","priority","userCount","requiresAdvancedFeatures","includes","validateAccessToken","parse","atob","valid","reason"],"sources":["/Users/siteoptz/siteoptz-scraping/src/services/CyfeService.js"],"sourcesContent":["// Cyfe Dashboard Integration Service\nimport { pricingPlans } from '../../pricing-plans';\n\nclass CyfeService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_CYFE_BASE_URL || 'https://app.cyfe.com';\n    this.apiKey = process.env.REACT_APP_CYFE_API_KEY;\n    this.whiteLabelDomain = process.env.REACT_APP_CYFE_WHITELABEL_DOMAIN;\n  }\n\n  // Dashboard configuration for each plan tier\n  getDashboardConfig(planId) {\n    const planConfigs = {\n      free: {\n        dashboards: [\n          {\n            id: 'basic_analytics',\n            name: 'Basic Analytics',\n            url: `${this.baseUrl}/dashboards/basic_analytics`,\n            description: 'Basic usage statistics and performance metrics',\n            widgets: ['usage_stats', 'request_timeline', 'error_rates']\n          }\n        ],\n        maxDashboards: 1,\n        maxUsers: 1,\n        features: ['basic_widgets', 'standard_refresh']\n      },\n      starter: {\n        dashboards: [\n          {\n            id: 'advanced_analytics',\n            name: 'Advanced Analytics',\n            url: `${this.baseUrl}/dashboards/advanced_analytics`,\n            description: 'Detailed analytics with API usage and scheduling',\n            widgets: ['usage_stats', 'api_calls', 'scheduled_jobs', 'performance_metrics']\n          },\n          {\n            id: 'api_monitoring',\n            name: 'API Monitoring',\n            url: `${this.baseUrl}/dashboards/api_monitoring`,\n            description: 'Monitor API calls, response times, and errors',\n            widgets: ['api_requests', 'response_times', 'error_tracking', 'rate_limits']\n          }\n        ],\n        maxDashboards: 2,\n        maxUsers: 3,\n        features: ['custom_widgets', 'real_time_data', 'data_export']\n      },\n      pro: {\n        dashboards: [\n          {\n            id: 'comprehensive_analytics',\n            name: 'Comprehensive Analytics',\n            url: `${this.baseUrl}/dashboards/comprehensive_analytics`,\n            description: 'Full analytics suite with team collaboration',\n            widgets: ['usage_stats', 'team_activity', 'project_metrics', 'cost_analysis']\n          },\n          {\n            id: 'team_dashboard',\n            name: 'Team Dashboard',\n            url: `${this.baseUrl}/dashboards/team_dashboard`,\n            description: 'Team collaboration and project management',\n            widgets: ['team_performance', 'project_status', 'collaboration_metrics']\n          },\n          {\n            id: 'advanced_monitoring',\n            name: 'Advanced Monitoring',\n            url: `${this.baseUrl}/dashboards/advanced_monitoring`,\n            description: 'Advanced system monitoring and alerts',\n            widgets: ['system_health', 'alert_management', 'performance_trends']\n          },\n          {\n            id: 'custom_reports',\n            name: 'Custom Reports',\n            url: `${this.baseUrl}/dashboards/custom_reports`,\n            description: 'Custom reporting and data visualization',\n            widgets: ['custom_charts', 'report_builder', 'data_export']\n          }\n        ],\n        maxDashboards: 4,\n        maxUsers: 10,\n        features: ['custom_dashboards', 'advanced_widgets', 'scheduled_reports', 'team_collaboration']\n      },\n      enterprise: {\n        dashboards: [\n          {\n            id: 'enterprise_overview',\n            name: 'Enterprise Overview',\n            url: `${this.baseUrl}/dashboards/enterprise_overview`,\n            description: 'Executive dashboard with key performance indicators',\n            widgets: ['kpi_overview', 'business_metrics', 'executive_summary']\n          },\n          {\n            id: 'operational_dashboard',\n            name: 'Operational Dashboard',\n            url: `${this.baseUrl}/dashboards/operational_dashboard`,\n            description: 'Real-time operational monitoring and management',\n            widgets: ['system_status', 'alert_center', 'performance_monitoring']\n          },\n          {\n            id: 'compliance_dashboard',\n            name: 'Compliance Dashboard',\n            url: `${this.baseUrl}/dashboards/compliance_dashboard`,\n            description: 'Compliance monitoring and audit trails',\n            widgets: ['compliance_status', 'audit_logs', 'security_metrics']\n          },\n          {\n            id: 'custom_business_dashboard',\n            name: 'Custom Business Dashboard',\n            url: `${this.baseUrl}/dashboards/custom_business`,\n            description: 'Custom dashboard tailored to business needs',\n            widgets: ['custom_kpis', 'business_intelligence', 'custom_analytics']\n          },\n          {\n            id: 'multi_region_dashboard',\n            name: 'Multi-Region Dashboard',\n            url: `${this.baseUrl}/dashboards/multi_region`,\n            description: 'Global performance and regional analytics',\n            widgets: ['regional_performance', 'global_metrics', 'latency_monitoring']\n          }\n        ],\n        maxDashboards: -1, // Unlimited\n        maxUsers: -1, // Unlimited\n        features: ['unlimited_dashboards', 'custom_branding', 'sla_monitoring', 'compliance_tools', 'multi_region_support']\n      }\n    };\n\n    return planConfigs[planId] || planConfigs.free;\n  }\n\n  // Generate authenticated dashboard URL\n  generateDashboardUrl(dashboardId, userId, planId) {\n    const config = this.getDashboardConfig(planId);\n    const dashboard = config.dashboards.find(d => d.id === dashboardId);\n    \n    if (!dashboard) {\n      throw new Error(`Dashboard ${dashboardId} not available for plan ${planId}`);\n    }\n\n    // For white-label setup, use your custom domain\n    const baseUrl = this.whiteLabelDomain || this.baseUrl;\n    \n    // Generate secure token for dashboard access\n    const token = this.generateAccessToken(userId, planId, dashboardId);\n    \n    return `${baseUrl}/embed/${dashboardId}?token=${token}&user=${userId}&plan=${planId}`;\n  }\n\n  // Generate access token for dashboard authentication\n  generateAccessToken(userId, planId, dashboardId) {\n    // In a real implementation, this would be generated on your backend\n    // and validated by Cyfe's white-label system\n    const payload = {\n      userId,\n      planId,\n      dashboardId,\n      timestamp: Date.now(),\n      expires: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\n    };\n    \n    // This should be signed with your secret key\n    return btoa(JSON.stringify(payload));\n  }\n\n  // Check if user has access to a specific dashboard\n  hasDashboardAccess(userId, planId, dashboardId) {\n    const config = this.getDashboardConfig(planId);\n    return config.dashboards.some(dashboard => dashboard.id === dashboardId);\n  }\n\n  // Get available dashboards for a plan\n  getAvailableDashboards(planId) {\n    const config = this.getDashboardConfig(planId);\n    return config.dashboards;\n  }\n\n  // Get dashboard limits for a plan\n  getDashboardLimits(planId) {\n    const config = this.getDashboardConfig(planId);\n    return {\n      maxDashboards: config.maxDashboards,\n      maxUsers: config.maxUsers,\n      features: config.features\n    };\n  }\n\n  // Push data to Cyfe dashboard (using Cyfe Push API)\n  async pushDataToDashboard(dashboardId, widgetId, data) {\n    const endpoint = `${this.baseUrl}/api/push/${dashboardId}/${widgetId}`;\n    \n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          data: data,\n          onduplicate: 'update',\n          color: '#3b82f6',\n          type: 'line'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to push data: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error pushing data to Cyfe:', error);\n      throw error;\n    }\n  }\n\n  // Get upgrade suggestions based on current usage\n  getUpgradeSuggestions(currentPlan, usage) {\n    const suggestions = [];\n    const config = this.getDashboardConfig(currentPlan);\n    const nextPlan = pricingPlans[currentPlan]?.upgradeTo;\n\n    if (!nextPlan) return suggestions;\n\n    // Check dashboard usage\n    if (config.maxDashboards > 0 && usage.dashboardCount >= config.maxDashboards) {\n      suggestions.push({\n        type: 'dashboard_limit',\n        message: `You've reached your dashboard limit (${config.maxDashboards}). Upgrade to ${nextPlan} for more dashboards.`,\n        priority: 'high'\n      });\n    }\n\n    // Check user limit\n    if (config.maxUsers > 0 && usage.userCount >= config.maxUsers) {\n      suggestions.push({\n        type: 'user_limit',\n        message: `You've reached your user limit (${config.maxUsers}). Upgrade to ${nextPlan} for more users.`,\n        priority: 'high'\n      });\n    }\n\n    // Check feature usage\n    if (usage.requiresAdvancedFeatures && !config.features.includes('custom_dashboards')) {\n      suggestions.push({\n        type: 'feature_limit',\n        message: 'You need advanced features like custom dashboards. Upgrade to access more capabilities.',\n        priority: 'medium'\n      });\n    }\n\n    return suggestions;\n  }\n\n  // Validate dashboard access token\n  validateAccessToken(token) {\n    try {\n      const payload = JSON.parse(atob(token));\n      \n      // Check if token is expired\n      if (Date.now() > payload.expires) {\n        return { valid: false, reason: 'expired' };\n      }\n\n      return { \n        valid: true, \n        userId: payload.userId,\n        planId: payload.planId,\n        dashboardId: payload.dashboardId\n      };\n    } catch (error) {\n      return { valid: false, reason: 'invalid' };\n    }\n  }\n}\n\nexport default new CyfeService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}