{"ast":null,"code":"var _jsxFileName = \"/Users/siteoptz/siteoptz-scraping/src/contexts/UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUser = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n_s(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [currentPlan, setCurrentPlan] = useState('free');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Simulate loading user data\n    const loadUser = async () => {\n      try {\n        // In a real app, this would fetch from your API\n        const userData = {\n          id: 'user_123',\n          email: 'user@example.com',\n          name: 'John Doe',\n          plan: currentPlan,\n          subscription: null\n        };\n        setUser(userData);\n        setCurrentPlan(userData.plan);\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n  const upgradePlan = async newPlan => {\n    try {\n      setCurrentPlan(newPlan);\n      // Update user plan in backend\n      if (user) {\n        setUser({\n          ...user,\n          plan: newPlan\n        });\n      }\n    } catch (error) {\n      console.error('Error upgrading plan:', error);\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    currentPlan,\n    loading,\n    upgradePlan,\n    setCurrentPlan\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"g0jY8fqqc9SGaZIPf/wh+RF7jEU=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","useUser","_s","context","Error","UserProvider","children","_s2","user","setUser","currentPlan","setCurrentPlan","loading","setLoading","loadUser","userData","id","email","name","plan","subscription","error","console","upgradePlan","newPlan","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siteoptz/siteoptz-scraping/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst UserContext = createContext();\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [currentPlan, setCurrentPlan] = useState('free');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulate loading user data\n    const loadUser = async () => {\n      try {\n        // In a real app, this would fetch from your API\n        const userData = {\n          id: 'user_123',\n          email: 'user@example.com',\n          name: 'John Doe',\n          plan: currentPlan,\n          subscription: null\n        };\n        \n        setUser(userData);\n        setCurrentPlan(userData.plan);\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  const upgradePlan = async (newPlan) => {\n    try {\n      setCurrentPlan(newPlan);\n      // Update user plan in backend\n      if (user) {\n        setUser({ ...user, plan: newPlan });\n      }\n    } catch (error) {\n      console.error('Error upgrading plan:', error);\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    currentPlan,\n    loading,\n    upgradePlan,\n    setCurrentPlan\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,MAAM,CAAC;EACtD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG;UACfC,EAAE,EAAE,UAAU;UACdC,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE,UAAU;UAChBC,IAAI,EAAET,WAAW;UACjBU,YAAY,EAAE;QAChB,CAAC;QAEDX,OAAO,CAACM,QAAQ,CAAC;QACjBJ,cAAc,CAACI,QAAQ,CAACI,IAAI,CAAC;MAC/B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAI;MACFb,cAAc,CAACa,OAAO,CAAC;MACvB;MACA,IAAIhB,IAAI,EAAE;QACRC,OAAO,CAAC;UAAE,GAAGD,IAAI;UAAEW,IAAI,EAAEK;QAAQ,CAAC,CAAC;MACrC;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMI,KAAK,GAAG;IACZjB,IAAI;IACJE,WAAW;IACXE,OAAO;IACPW,WAAW;IACXZ;EACF,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAChCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CAxDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}