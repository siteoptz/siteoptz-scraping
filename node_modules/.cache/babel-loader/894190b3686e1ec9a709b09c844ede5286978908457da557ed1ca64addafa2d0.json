{"ast":null,"code":"// AI-Powered SEO Service\n// Comprehensive SEO automation for white-label reselling\n\nimport axios from 'axios';\nclass AISEOService {\n  constructor() {\n    this.openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\n    this.anthropicApiKey = process.env.REACT_APP_ANTHROPIC_API_KEY;\n    this.perplexityApiKey = process.env.REACT_APP_PERPLEXITY_API_KEY;\n    this.ahrefsApiKey = process.env.REACT_APP_AHREFS_API_KEY;\n    this.semrushApiKey = process.env.REACT_APP_SEMRUSH_API_KEY;\n\n    // Base URLs\n    this.openaiBaseUrl = 'https://api.openai.com/v1';\n    this.anthropicBaseUrl = 'https://api.anthropic.com/v1';\n    this.perplexityBaseUrl = 'https://api.perplexity.ai';\n  }\n\n  /**\n   * MAIN SERVICE METHOD\n   * Complete SEO service for one client/month\n   */\n  async executeMonthlyService(clientData) {\n    console.log('🚀 Starting AI-Powered SEO Service for:', clientData.businessName);\n    const results = {\n      client: clientData,\n      timestamp: new Date().toISOString(),\n      deliverables: {}\n    };\n    try {\n      // 1. Keyword Research & Clustering\n      console.log('📊 Step 1: AI Keyword Research...');\n      results.deliverables.keywords = await this.performKeywordResearch(clientData);\n\n      // 2. Content Generation (Blog Posts)\n      console.log('✍️ Step 2: Generating AI Content...');\n      results.deliverables.content = await this.generateMonthlyContent(clientData, results.deliverables.keywords);\n\n      // 3. Technical SEO Audit\n      console.log('🔧 Step 3: Technical SEO Audit...');\n      results.deliverables.technicalAudit = await this.performTechnicalAudit(clientData.websiteUrl);\n\n      // 4. Competitor Analysis\n      console.log('🎯 Step 4: Competitor Analysis...');\n      results.deliverables.competitorAnalysis = await this.analyzeCompetitors(clientData.industry, clientData.competitors || []);\n\n      // 5. Link Building Opportunities\n      console.log('🔗 Step 5: Link Building Strategy...');\n      results.deliverables.linkBuilding = await this.generateLinkBuildingCampaign(clientData, results.deliverables.keywords);\n\n      // 6. Local SEO (if applicable)\n      if (clientData.localBusiness) {\n        console.log('📍 Step 6: Local SEO Optimization...');\n        results.deliverables.localSEO = await this.optimizeLocalSEO(clientData);\n      }\n\n      // 7. Schema Markup Generation\n      console.log('🏷️ Step 7: Schema Markup...');\n      results.deliverables.schema = await this.generateSchemaMarkup(clientData);\n\n      // 8. Monthly Report Generation\n      console.log('📈 Step 8: Generating Report...');\n      results.deliverables.report = await this.generateMonthlyReport(results);\n      console.log('✅ AI SEO Service Complete!');\n      return results;\n    } catch (error) {\n      console.error('❌ Error in AI SEO Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 1. AI KEYWORD RESEARCH\n   * Generate 100+ keywords with clustering and prioritization\n   */\n  async performKeywordResearch(clientData) {\n    const {\n      industry,\n      location,\n      businessType,\n      targetAudience\n    } = clientData;\n\n    // Step 1: Generate seed keywords with GPT-4\n    const seedKeywords = await this.generateSeedKeywords(industry, businessType, targetAudience);\n\n    // Step 2: Expand keywords with variations\n    const expandedKeywords = await this.expandKeywords(seedKeywords);\n\n    // Step 3: Get search volume and difficulty (simulated or via API)\n    const keywordsWithMetrics = await this.enrichKeywordsWithMetrics(expandedKeywords);\n\n    // Step 4: Cluster keywords by intent\n    const clusteredKeywords = await this.clusterKeywordsByIntent(keywordsWithMetrics);\n\n    // Step 5: Prioritize keywords\n    const prioritizedKeywords = this.prioritizeKeywords(clusteredKeywords);\n    return {\n      totalKeywords: prioritizedKeywords.length,\n      clusters: this.groupByCluster(prioritizedKeywords),\n      topOpportunities: prioritizedKeywords.slice(0, 20),\n      contentIdeas: await this.generateContentIdeas(prioritizedKeywords)\n    };\n  }\n  async generateSeedKeywords(industry, businessType, targetAudience) {\n    try {\n      const prompt = `You are an expert SEO strategist. Generate a comprehensive list of seed keywords for a ${businessType} business in the ${industry} industry targeting ${targetAudience}.\n\nInclude:\n- Primary service/product keywords\n- Industry-specific terms\n- Problem-solution keywords\n- Comparison keywords\n- Question-based keywords\n- Long-tail variations\n\nFormat as a JSON array of objects with: {\"keyword\": \"example\", \"intent\": \"transactional|informational|navigational|commercial\"}\n\nGenerate 50 seed keywords.`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert SEO and keyword research specialist.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.keywords || [];\n    } catch (error) {\n      var _error$response;\n      console.error('Error generating seed keywords:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      // Return fallback keywords\n      return this.getFallbackSeedKeywords(industry);\n    }\n  }\n  async expandKeywords(seedKeywords) {\n    // Expand each seed keyword with variations\n    const expansions = [];\n    const modifiers = ['best', 'top', 'affordable', 'near me', 'services', 'company', 'how to', 'what is', 'cost of', 'reviews', 'vs', 'guide'];\n    seedKeywords.forEach(seed => {\n      expansions.push(seed);\n\n      // Add modifier variations\n      modifiers.forEach(modifier => {\n        expansions.push({\n          keyword: `${modifier} ${seed.keyword}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n        expansions.push({\n          keyword: `${seed.keyword} ${modifier}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n      });\n    });\n    return expansions.slice(0, 200); // Limit to 200 expanded keywords\n  }\n  async enrichKeywordsWithMetrics(keywords) {\n    // Simulate keyword metrics (in production, use Ahrefs/SEMrush API)\n    return keywords.map(kw => ({\n      ...kw,\n      searchVolume: Math.floor(Math.random() * 10000) + 100,\n      difficulty: Math.floor(Math.random() * 100),\n      cpc: (Math.random() * 10).toFixed(2),\n      trend: Math.random() > 0.5 ? 'up' : 'stable'\n    }));\n  }\n  async clusterKeywordsByIntent(keywords) {\n    try {\n      // Use GPT-4 to intelligently cluster keywords\n      const keywordList = keywords.slice(0, 100).map(k => k.keyword).join(', ');\n      const prompt = `Analyze these keywords and group them into logical clusters based on user intent and topic similarity:\n\n${keywordList}\n\nReturn a JSON object with clusters like:\n{\n  \"clusters\": [\n    {\n      \"name\": \"cluster name\",\n      \"intent\": \"informational/transactional/commercial/navigational\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert SEO and keyword clustering specialist.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.3\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const clusters = JSON.parse(response.data.choices[0].message.content);\n\n      // Map back to full keyword objects\n      return this.mapClustersToKeywords(clusters.clusters, keywords);\n    } catch (error) {\n      console.error('Error clustering keywords:', error.message);\n      return this.fallbackClustering(keywords);\n    }\n  }\n  prioritizeKeywords(clusteredKeywords) {\n    // Calculate priority score: (SearchVolume / Difficulty) * Intent Weight\n    const intentWeights = {\n      transactional: 1.5,\n      commercial: 1.3,\n      informational: 1.0,\n      navigational: 0.8\n    };\n    return clusteredKeywords.map(kw => ({\n      ...kw,\n      priorityScore: kw.searchVolume / (kw.difficulty + 1) * (intentWeights[kw.intent] || 1)\n    })).sort((a, b) => b.priorityScore - a.priorityScore);\n  }\n  async generateContentIdeas(keywords) {\n    const topKeywords = keywords.slice(0, 10);\n    try {\n      const prompt = `Based on these high-priority keywords, generate 20 blog post titles that would rank well:\n\n${topKeywords.map(k => `- ${k.keyword}`).join('\\n')}\n\nReturn a JSON array of objects with: {\"title\": \"Blog Title\", \"targetKeyword\": \"main keyword\", \"contentType\": \"how-to|guide|listicle|comparison|case-study\"}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert content strategist and SEO specialist.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.8\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.ideas || result.titles || [];\n    } catch (error) {\n      console.error('Error generating content ideas:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 2. AI CONTENT GENERATION\n   * Generate 10-20 blog posts per month\n   */\n  async generateMonthlyContent(clientData, keywordData) {\n    const contentIdeas = keywordData.contentIdeas.slice(0, 15);\n    const generatedContent = [];\n    for (const idea of contentIdeas) {\n      try {\n        console.log(`  📝 Generating: \"${idea.title}\"`);\n        const article = await this.generateBlogPost(idea, clientData, keywordData.topOpportunities);\n        generatedContent.push(article);\n\n        // Rate limiting: wait 2 seconds between articles\n        await this.sleep(2000);\n      } catch (error) {\n        console.error(`Error generating article \"${idea.title}\":`, error.message);\n      }\n    }\n    return {\n      totalArticles: generatedContent.length,\n      articles: generatedContent,\n      totalWords: generatedContent.reduce((sum, a) => sum + a.wordCount, 0)\n    };\n  }\n  async generateBlogPost(idea, clientData, relatedKeywords) {\n    try {\n      // Step 1: Research with Perplexity (if available) or GPT-4\n      const research = await this.researchTopic(idea.title, idea.targetKeyword);\n\n      // Step 2: Create outline\n      const outline = await this.createContentOutline(idea, research, relatedKeywords);\n\n      // Step 3: Generate full article with GPT-4\n      const content = await this.writeArticleContent(idea, outline, clientData, research);\n\n      // Step 4: Optimize for SEO\n      const optimizedContent = await this.optimizeContent(content, idea.targetKeyword);\n\n      // Step 5: Generate meta data\n      const metadata = await this.generateMetadata(idea, optimizedContent);\n      return {\n        title: idea.title,\n        targetKeyword: idea.targetKeyword,\n        content: optimizedContent,\n        outline: outline,\n        metadata: metadata,\n        wordCount: optimizedContent.split(' ').length,\n        readTime: Math.ceil(optimizedContent.split(' ').length / 200),\n        seoScore: this.calculateSEOScore(optimizedContent, idea.targetKeyword),\n        generatedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating blog post:', error.message);\n      throw error;\n    }\n  }\n  async researchTopic(title, keyword) {\n    try {\n      const prompt = `Research and provide key facts, statistics, and insights about: \"${title}\" focusing on the keyword \"${keyword}\". Include recent data, expert opinions, and actionable insights.`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert researcher providing accurate, up-to-date information.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.4\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error researching topic:', error.message);\n      return '';\n    }\n  }\n  async createContentOutline(idea, research, relatedKeywords) {\n    try {\n      const prompt = `Create a detailed blog post outline for: \"${idea.title}\"\n\nTarget keyword: ${idea.targetKeyword}\nContent type: ${idea.contentType}\nRelated keywords to include: ${relatedKeywords.slice(0, 5).map(k => k.keyword).join(', ')}\n\nResearch context: ${research.substring(0, 500)}\n\nReturn a JSON object with:\n{\n  \"introduction\": \"Hook and overview\",\n  \"sections\": [\n    {\"heading\": \"H2 heading\", \"subheadings\": [\"H3\", \"H3\"], \"keyPoints\": [\"point1\", \"point2\"]}\n  ],\n  \"conclusion\": \"Summary and CTA\"\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert content strategist creating SEO-optimized outlines.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.6\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error creating outline:', error.message);\n      return {\n        sections: []\n      };\n    }\n  }\n  async writeArticleContent(idea, outline, clientData, research) {\n    try {\n      const outlineText = JSON.stringify(outline, null, 2);\n      const prompt = `Write a comprehensive, engaging blog post following this outline:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nBusiness Context: ${clientData.businessName} - ${clientData.industry}\n\nOutline:\n${outlineText}\n\nResearch:\n${research}\n\nRequirements:\n- 1500-2000 words\n- Conversational yet professional tone\n- Include the target keyword naturally (2-3% density)\n- Use short paragraphs (2-3 sentences)\n- Include transition words\n- Add bullet points and numbered lists\n- SEO-optimized headers (H2, H3)\n- Strong introduction with hook\n- Clear conclusion with CTA\n- Naturally mention ${clientData.businessName} where relevant\n\nWrite the complete article in markdown format.`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert content writer specializing in SEO-optimized, engaging blog posts.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.7,\n        max_tokens: 4000\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error writing article:', error.message);\n      return '';\n    }\n  }\n  async optimizeContent(content, targetKeyword) {\n    // Check keyword density\n    const keywordDensity = this.calculateKeywordDensity(content, targetKeyword);\n    if (keywordDensity < 0.015) {\n      // Add keyword variations naturally\n      console.log(`  ⚠️ Low keyword density (${(keywordDensity * 100).toFixed(2)}%), optimizing...`);\n      // In production, use AI to naturally add keywords\n    }\n\n    // Add internal link placeholders\n    const optimizedContent = content + '\\n\\n[INTERNAL_LINK_PLACEHOLDER]';\n    return optimizedContent;\n  }\n  async generateMetadata(idea, content) {\n    try {\n      const prompt = `Generate SEO metadata for this article:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nContent Preview: ${content.substring(0, 500)}...\n\nReturn JSON with:\n{\n  \"metaTitle\": \"60 chars max, includes target keyword\",\n  \"metaDescription\": \"150-160 chars, compelling, includes keyword\",\n  \"focusKeyword\": \"main keyword\",\n  \"slug\": \"url-friendly-slug\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an SEO expert creating compelling metadata.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.6\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating metadata:', error.message);\n      return {\n        metaTitle: idea.title,\n        metaDescription: '',\n        slug: this.slugify(idea.title)\n      };\n    }\n  }\n\n  /**\n   * 3. TECHNICAL SEO AUDIT\n   */\n  async performTechnicalAudit(websiteUrl) {\n    console.log(`  🔍 Auditing: ${websiteUrl}`);\n    const audit = {\n      url: websiteUrl,\n      timestamp: new Date().toISOString(),\n      issues: [],\n      recommendations: []\n    };\n\n    // Check various technical SEO factors\n    const checks = [this.checkPageSpeed(websiteUrl), this.checkMobileResponsiveness(websiteUrl), this.checkSSL(websiteUrl), this.checkRobotsTxt(websiteUrl), this.checkSitemap(websiteUrl), this.checkStructuredData(websiteUrl)];\n    const results = await Promise.allSettled(checks);\n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        audit.issues.push(...result.value.issues);\n        audit.recommendations.push(...result.value.recommendations);\n      }\n    });\n\n    // Generate fix instructions with AI\n    audit.fixes = await this.generateFixInstructions(audit.issues);\n    return audit;\n  }\n  async checkPageSpeed(url) {\n    // Simulate page speed check (use PageSpeed Insights API in production)\n    return {\n      issues: [{\n        type: 'performance',\n        severity: 'medium',\n        description: 'Page load time exceeds 3 seconds'\n      }],\n      recommendations: ['Optimize images (use WebP format)', 'Minify CSS and JavaScript', 'Enable browser caching', 'Use a CDN']\n    };\n  }\n  async checkMobileResponsiveness(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure viewport meta tag is present', 'Test on various devices']\n    };\n  }\n  async checkSSL(url) {\n    const hasSSL = url.startsWith('https://');\n    return {\n      issues: hasSSL ? [] : [{\n        type: 'security',\n        severity: 'high',\n        description: 'No SSL certificate detected'\n      }],\n      recommendations: hasSSL ? [] : ['Install SSL certificate immediately']\n    };\n  }\n  async checkRobotsTxt(url) {\n    try {\n      const robotsUrl = new URL('/robots.txt', url).href;\n      await axios.get(robotsUrl);\n      return {\n        issues: [],\n        recommendations: ['Robots.txt found and accessible']\n      };\n    } catch (error) {\n      return {\n        issues: [{\n          type: 'indexability',\n          severity: 'low',\n          description: 'No robots.txt file found'\n        }],\n        recommendations: ['Create a robots.txt file']\n      };\n    }\n  }\n  async checkSitemap(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure XML sitemap is submitted to Google Search Console']\n    };\n  }\n  async checkStructuredData(url) {\n    return {\n      issues: [],\n      recommendations: ['Add schema markup for better rich snippets']\n    };\n  }\n  async generateFixInstructions(issues) {\n    if (issues.length === 0) return [];\n    try {\n      const issuesList = issues.map(i => `- ${i.description}`).join('\\n');\n      const prompt = `Provide step-by-step fix instructions for these technical SEO issues:\n\n${issuesList}\n\nReturn JSON array with:\n[\n  {\n    \"issue\": \"issue description\",\n    \"priority\": \"high|medium|low\",\n    \"steps\": [\"step 1\", \"step 2\"],\n    \"estimatedTime\": \"time to fix\"\n  }\n]`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are a technical SEO expert providing actionable fix instructions.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.3\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.fixes || [];\n    } catch (error) {\n      console.error('Error generating fix instructions:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 4. COMPETITOR ANALYSIS\n   */\n  async analyzeCompetitors(industry, competitors) {\n    console.log(`  🎯 Analyzing competitors in ${industry}...`);\n    const analysis = {\n      industry,\n      competitors: [],\n      opportunities: [],\n      threats: []\n    };\n\n    // Analyze each competitor\n    for (const competitor of competitors.slice(0, 3)) {\n      try {\n        const competitorData = await this.analyzeCompetitor(competitor);\n        analysis.competitors.push(competitorData);\n      } catch (error) {\n        console.error(`Error analyzing ${competitor}:`, error.message);\n      }\n    }\n\n    // Generate strategic insights\n    analysis.insights = await this.generateCompetitorInsights(analysis.competitors);\n    return analysis;\n  }\n  async analyzeCompetitor(competitorUrl) {\n    // Simulate competitor analysis (use Ahrefs/SEMrush in production)\n    return {\n      url: competitorUrl,\n      estimatedTraffic: Math.floor(Math.random() * 100000) + 10000,\n      topKeywords: [{\n        keyword: 'example keyword 1',\n        position: 3,\n        searchVolume: 5000\n      }, {\n        keyword: 'example keyword 2',\n        position: 5,\n        searchVolume: 3000\n      }],\n      backlinks: Math.floor(Math.random() * 10000) + 1000,\n      domainRating: Math.floor(Math.random() * 100),\n      contentGaps: []\n    };\n  }\n  async generateCompetitorInsights(competitors) {\n    try {\n      const competitorData = JSON.stringify(competitors, null, 2);\n      const prompt = `Analyze these competitor SEO metrics and provide strategic insights:\n\n${competitorData}\n\nReturn JSON with:\n{\n  \"strengths\": [\"what competitors do well\"],\n  \"weaknesses\": [\"gaps we can exploit\"],\n  \"opportunities\": [\"specific actions to outrank them\"],\n  \"contentGaps\": [\"topics they rank for that we should target\"]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are a competitive SEO analyst providing strategic insights.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.6\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating competitor insights:', error.message);\n      return {};\n    }\n  }\n\n  /**\n   * 5. LINK BUILDING AUTOMATION\n   */\n  async generateLinkBuildingCampaign(clientData, keywords) {\n    console.log('  🔗 Creating link building campaign...');\n    const campaign = {\n      targetKeywords: keywords.topOpportunities.slice(0, 5),\n      prospects: [],\n      outreachEmails: []\n    };\n\n    // Find link prospects\n    campaign.prospects = await this.findLinkProspects(clientData.industry, keywords);\n\n    // Generate outreach emails\n    for (const prospect of campaign.prospects.slice(0, 10)) {\n      const email = await this.generateOutreachEmail(prospect, clientData);\n      campaign.outreachEmails.push(email);\n    }\n    return campaign;\n  }\n  async findLinkProspects(industry, keywords) {\n    // Simulate finding link prospects (use Ahrefs/Hunter.io in production)\n    const prospects = [];\n    const types = ['blog', 'news site', 'industry publication', 'resource page'];\n    for (let i = 0; i < 20; i++) {\n      prospects.push({\n        domain: `example-site-${i}.com`,\n        type: types[Math.floor(Math.random() * types.length)],\n        domainRating: Math.floor(Math.random() * 100),\n        traffic: Math.floor(Math.random() * 50000) + 1000,\n        relevance: Math.random(),\n        contactEmail: `editor@example-site-${i}.com`\n      });\n    }\n    return prospects.sort((a, b) => b.relevance - a.relevance);\n  }\n  async generateOutreachEmail(prospect, clientData) {\n    try {\n      const prompt = `Write a personalized link building outreach email for:\n\nProspect: ${prospect.domain} (${prospect.type})\nOur Business: ${clientData.businessName} - ${clientData.industry}\n\nRequirements:\n- Personalized subject line\n- Brief, friendly introduction\n- Value proposition (why link to us)\n- Specific content to link to\n- Clear call-to-action\n- Professional signature\n- Keep under 150 words\n\nReturn JSON with:\n{\n  \"subject\": \"email subject\",\n  \"body\": \"email body\",\n  \"followUp\": \"follow-up email if no response\"\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are an expert at writing persuasive, personalized outreach emails.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.8\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const email = JSON.parse(response.data.choices[0].message.content);\n      return {\n        prospect,\n        ...email,\n        status: 'draft',\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating outreach email:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 6. LOCAL SEO OPTIMIZATION\n   */\n  async optimizeLocalSEO(clientData) {\n    console.log('  📍 Optimizing local SEO...');\n    return {\n      googleBusinessProfile: await this.optimizeGBP(clientData),\n      localCitations: await this.generateLocalCitations(clientData),\n      localContent: await this.createLocalContent(clientData),\n      reviewStrategy: await this.createReviewStrategy(clientData)\n    };\n  }\n  async optimizeGBP(clientData) {\n    try {\n      var _clientData$services;\n      const prompt = `Create an optimized Google Business Profile description for:\n\nBusiness: ${clientData.businessName}\nIndustry: ${clientData.industry}\nLocation: ${clientData.location}\nServices: ${((_clientData$services = clientData.services) === null || _clientData$services === void 0 ? void 0 : _clientData$services.join(', ')) || 'various services'}\n\nReturn JSON with:\n{\n  \"businessDescription\": \"compelling 750-char description\",\n  \"services\": [\"service 1\", \"service 2\"],\n  \"attributes\": [\"attribute1\", \"attribute2\"],\n  \"posts\": [{\"title\": \"post title\", \"content\": \"post content\"}]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are a local SEO expert specializing in Google Business Profile optimization.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error optimizing GBP:', error.message);\n      return {};\n    }\n  }\n  async generateLocalCitations(clientData) {\n    // List of local citation sites\n    return {\n      citations: [{\n        site: 'Yelp',\n        url: 'https://yelp.com',\n        priority: 'high',\n        status: 'pending'\n      }, {\n        site: 'Yellow Pages',\n        url: 'https://yellowpages.com',\n        priority: 'high',\n        status: 'pending'\n      }, {\n        site: 'Better Business Bureau',\n        url: 'https://bbb.org',\n        priority: 'medium',\n        status: 'pending'\n      }, {\n        site: 'Foursquare',\n        url: 'https://foursquare.com',\n        priority: 'medium',\n        status: 'pending'\n      }, {\n        site: 'Bing Places',\n        url: 'https://bingplaces.com',\n        priority: 'high',\n        status: 'pending'\n      }],\n      instructions: 'Submit consistent NAP (Name, Address, Phone) across all platforms'\n    };\n  }\n  async createLocalContent(clientData) {\n    var _clientData$services2;\n    // Generate location-specific content ideas\n    return {\n      localPages: [`${((_clientData$services2 = clientData.services) === null || _clientData$services2 === void 0 ? void 0 : _clientData$services2[0]) || 'Services'} in ${clientData.location}`, `Best ${clientData.industry} near ${clientData.location}`, `${clientData.location} ${clientData.industry} Guide`],\n      localBlogPosts: [`Top 10 ${clientData.industry} Tips for ${clientData.location} Residents`, `${clientData.location} Community Guide`, `Why Choose ${clientData.businessName} in ${clientData.location}`]\n    };\n  }\n  async createReviewStrategy(clientData) {\n    return {\n      platforms: ['Google', 'Yelp', 'Facebook'],\n      strategy: 'Send review requests 3-5 days after service completion',\n      emailTemplates: await this.generateReviewRequestTemplates(clientData),\n      responseTemplates: await this.generateReviewResponseTemplates(clientData)\n    };\n  }\n  async generateReviewRequestTemplates(clientData) {\n    try {\n      const prompt = `Create 3 friendly review request email templates for ${clientData.businessName}. Make them warm, appreciative, and include direct links to review platforms.`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.8\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      return 'Error generating templates';\n    }\n  }\n  async generateReviewResponseTemplates(clientData) {\n    return {\n      positive: `Thank you so much for your wonderful review! We're thrilled to hear about your positive experience with ${clientData.businessName}. We look forward to serving you again!`,\n      negative: `Thank you for your feedback. We're sorry to hear about your experience. We'd love the opportunity to make this right. Please contact us directly at [contact info].`,\n      neutral: `Thank you for taking the time to leave a review. We appreciate your feedback and are always looking to improve our services.`\n    };\n  }\n\n  /**\n   * 7. SCHEMA MARKUP GENERATION\n   */\n  async generateSchemaMarkup(clientData) {\n    console.log('  🏷️ Generating schema markup...');\n    const schemas = [];\n\n    // Organization schema\n    schemas.push(this.createOrganizationSchema(clientData));\n\n    // Local Business schema (if applicable)\n    if (clientData.localBusiness) {\n      schemas.push(this.createLocalBusinessSchema(clientData));\n    }\n\n    // Article schema (for blog posts)\n    schemas.push(this.createArticleSchemaTemplate(clientData));\n\n    // FAQ schema\n    schemas.push(await this.createFAQSchema(clientData));\n    return {\n      schemas,\n      implementation: 'Add these JSON-LD scripts to your website <head> section'\n    };\n  }\n  createOrganizationSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      \"name\": clientData.businessName,\n      \"url\": clientData.websiteUrl,\n      \"logo\": clientData.logoUrl || '',\n      \"description\": clientData.description || '',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"contactPoint\": {\n        \"@type\": \"ContactPoint\",\n        \"telephone\": clientData.phone || '',\n        \"contactType\": \"customer service\"\n      }\n    };\n  }\n  createLocalBusinessSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"LocalBusiness\",\n      \"name\": clientData.businessName,\n      \"image\": clientData.logoUrl || '',\n      \"url\": clientData.websiteUrl,\n      \"telephone\": clientData.phone || '',\n      \"priceRange\": clientData.priceRange || '$$',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": clientData.latitude || 0,\n        \"longitude\": clientData.longitude || 0\n      },\n      \"openingHoursSpecification\": clientData.hours || []\n    };\n  }\n  createArticleSchemaTemplate(clientData) {\n    return {\n      template: 'article',\n      schema: {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Article\",\n        \"headline\": \"[ARTICLE_TITLE]\",\n        \"image\": \"[ARTICLE_IMAGE_URL]\",\n        \"author\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName\n        },\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName,\n          \"logo\": {\n            \"@type\": \"ImageObject\",\n            \"url\": clientData.logoUrl || ''\n          }\n        },\n        \"datePublished\": \"[PUBLISH_DATE]\",\n        \"dateModified\": \"[MODIFIED_DATE]\"\n      }\n    };\n  }\n  async createFAQSchema(clientData) {\n    try {\n      const prompt = `Generate 5 frequently asked questions and answers for ${clientData.businessName} in the ${clientData.industry} industry.\n\nReturn JSON with:\n{\n  \"faqs\": [\n    {\"question\": \"question text\", \"answer\": \"detailed answer\"}\n  ]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const faqs = JSON.parse(response.data.choices[0].message.content);\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"FAQPage\",\n        \"mainEntity\": faqs.faqs.map(faq => ({\n          \"@type\": \"Question\",\n          \"name\": faq.question,\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": faq.answer\n          }\n        }))\n      };\n    } catch (error) {\n      console.error('Error creating FAQ schema:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 8. MONTHLY REPORT GENERATION\n   */\n  async generateMonthlyReport(results) {\n    console.log('  📊 Generating comprehensive report...');\n    try {\n      var _results$deliverables, _results$deliverables2, _results$deliverables3, _results$deliverables4, _results$deliverables5, _results$deliverables6;\n      const summaryPrompt = `Create an executive summary for this month's SEO work:\n\nKeywords researched: ${results.deliverables.keywords.totalKeywords}\nContent created: ${results.deliverables.content.totalArticles} articles (${results.deliverables.content.totalWords} words)\nTechnical issues found: ${results.deliverables.technicalAudit.issues.length}\nLink building prospects: ${((_results$deliverables = results.deliverables.linkBuilding) === null || _results$deliverables === void 0 ? void 0 : (_results$deliverables2 = _results$deliverables.prospects) === null || _results$deliverables2 === void 0 ? void 0 : _results$deliverables2.length) || 0}\n\nWrite a professional 2-3 paragraph summary highlighting the value delivered.`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'system',\n          content: 'You are a professional SEO consultant writing client reports.'\n        }, {\n          role: 'user',\n          content: summaryPrompt\n        }],\n        temperature: 0.6\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const executiveSummary = response.data.choices[0].message.content;\n      return {\n        reportDate: new Date().toISOString(),\n        client: results.client.businessName,\n        executiveSummary,\n        keyMetrics: {\n          keywordsResearched: results.deliverables.keywords.totalKeywords,\n          contentPieces: results.deliverables.content.totalArticles,\n          totalWords: results.deliverables.content.totalWords,\n          technicalIssuesFound: results.deliverables.technicalAudit.issues.length,\n          issuesFixed: 0,\n          // Track over time\n          linkProspects: ((_results$deliverables3 = results.deliverables.linkBuilding) === null || _results$deliverables3 === void 0 ? void 0 : (_results$deliverables4 = _results$deliverables3.prospects) === null || _results$deliverables4 === void 0 ? void 0 : _results$deliverables4.length) || 0,\n          outreachEmailsSent: ((_results$deliverables5 = results.deliverables.linkBuilding) === null || _results$deliverables5 === void 0 ? void 0 : (_results$deliverables6 = _results$deliverables5.outreachEmails) === null || _results$deliverables6 === void 0 ? void 0 : _results$deliverables6.length) || 0\n        },\n        deliverables: results.deliverables,\n        nextMonthPlan: await this.generateNextMonthPlan(results)\n      };\n    } catch (error) {\n      console.error('Error generating report:', error.message);\n      return {\n        reportDate: new Date().toISOString(),\n        error: 'Error generating report'\n      };\n    }\n  }\n  async generateNextMonthPlan(results) {\n    try {\n      const prompt = `Based on this month's SEO work, suggest a strategic plan for next month. Focus on building upon current progress and addressing gaps.\n\nCurrent progress:\n- ${results.deliverables.keywords.totalKeywords} keywords researched\n- ${results.deliverables.content.totalArticles} articles created\n- ${results.deliverables.technicalAudit.issues.length} technical issues identified\n\nReturn JSON with:\n{\n  \"priorities\": [\"priority 1\", \"priority 2\"],\n  \"contentTopics\": [\"topic 1\", \"topic 2\"],\n  \"technicalFocus\": [\"focus area 1\"],\n  \"linkBuildingGoals\": [\"goal 1\"]\n}`;\n      const response = await axios.post(`${this.openaiBaseUrl}/chat/completions`, {\n        model: 'gpt-4-turbo-preview',\n        messages: [{\n          role: 'user',\n          content: prompt\n        }],\n        response_format: {\n          type: 'json_object'\n        },\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.openaiApiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating next month plan:', error.message);\n      return {};\n    }\n  }\n\n  // ========== HELPER METHODS ==========\n\n  calculateKeywordDensity(content, keyword) {\n    const words = content.toLowerCase().split(/\\s+/);\n    const keywordWords = keyword.toLowerCase().split(/\\s+/);\n    const keywordCount = words.filter(w => keywordWords.includes(w)).length;\n    return keywordCount / words.length;\n  }\n  calculateSEOScore(content, keyword) {\n    let score = 0;\n\n    // Keyword in content\n    if (content.toLowerCase().includes(keyword.toLowerCase())) score += 20;\n\n    // Word count (1500-2000 ideal)\n    const wordCount = content.split(' ').length;\n    if (wordCount >= 1500 && wordCount <= 2500) score += 20;else if (wordCount >= 1000) score += 10;\n\n    // Headers present\n    if (content.includes('##')) score += 15;\n    if (content.includes('###')) score += 10;\n\n    // Lists present\n    if (content.includes('-') || content.includes('1.')) score += 10;\n\n    // Keyword density (1.5-2.5% ideal)\n    const density = this.calculateKeywordDensity(content, keyword);\n    if (density >= 0.015 && density <= 0.025) score += 25;else if (density > 0) score += 10;\n    return Math.min(score, 100);\n  }\n  slugify(text) {\n    return text.toLowerCase().replace(/[^\\w\\s-]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-').trim();\n  }\n  groupByCluster(keywords) {\n    const clusters = {};\n    keywords.forEach(kw => {\n      const cluster = kw.cluster || 'uncategorized';\n      if (!clusters[cluster]) clusters[cluster] = [];\n      clusters[cluster].push(kw);\n    });\n    return clusters;\n  }\n  mapClustersToKeywords(clusters, keywords) {\n    return keywords.map(kw => {\n      const cluster = clusters.find(c => c.keywords.some(ck => ck.toLowerCase() === kw.keyword.toLowerCase()));\n      return {\n        ...kw,\n        cluster: (cluster === null || cluster === void 0 ? void 0 : cluster.name) || 'uncategorized',\n        clusterIntent: (cluster === null || cluster === void 0 ? void 0 : cluster.intent) || kw.intent\n      };\n    });\n  }\n  fallbackClustering(keywords) {\n    // Simple fallback clustering by intent\n    return keywords.map(kw => ({\n      ...kw,\n      cluster: kw.intent || 'general'\n    }));\n  }\n  getFallbackSeedKeywords(industry) {\n    return [{\n      keyword: `${industry} services`,\n      intent: 'commercial'\n    }, {\n      keyword: `best ${industry}`,\n      intent: 'informational'\n    }, {\n      keyword: `${industry} near me`,\n      intent: 'transactional'\n    }, {\n      keyword: `how to choose ${industry}`,\n      intent: 'informational'\n    }, {\n      keyword: `${industry} cost`,\n      intent: 'commercial'\n    }];\n  }\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\nexport default new AISEOService();","map":{"version":3,"names":["axios","AISEOService","constructor","openaiApiKey","process","env","REACT_APP_OPENAI_API_KEY","anthropicApiKey","REACT_APP_ANTHROPIC_API_KEY","perplexityApiKey","REACT_APP_PERPLEXITY_API_KEY","ahrefsApiKey","REACT_APP_AHREFS_API_KEY","semrushApiKey","REACT_APP_SEMRUSH_API_KEY","openaiBaseUrl","anthropicBaseUrl","perplexityBaseUrl","executeMonthlyService","clientData","console","log","businessName","results","client","timestamp","Date","toISOString","deliverables","keywords","performKeywordResearch","content","generateMonthlyContent","technicalAudit","performTechnicalAudit","websiteUrl","competitorAnalysis","analyzeCompetitors","industry","competitors","linkBuilding","generateLinkBuildingCampaign","localBusiness","localSEO","optimizeLocalSEO","schema","generateSchemaMarkup","report","generateMonthlyReport","error","location","businessType","targetAudience","seedKeywords","generateSeedKeywords","expandedKeywords","expandKeywords","keywordsWithMetrics","enrichKeywordsWithMetrics","clusteredKeywords","clusterKeywordsByIntent","prioritizedKeywords","prioritizeKeywords","totalKeywords","length","clusters","groupByCluster","topOpportunities","slice","contentIdeas","generateContentIdeas","prompt","response","post","model","messages","role","response_format","type","temperature","headers","result","JSON","parse","data","choices","message","_error$response","getFallbackSeedKeywords","expansions","modifiers","forEach","seed","push","modifier","keyword","intent","map","kw","searchVolume","Math","floor","random","difficulty","cpc","toFixed","trend","keywordList","k","join","mapClustersToKeywords","fallbackClustering","intentWeights","transactional","commercial","informational","navigational","priorityScore","sort","a","b","topKeywords","ideas","titles","keywordData","generatedContent","idea","title","article","generateBlogPost","sleep","totalArticles","articles","totalWords","reduce","sum","wordCount","relatedKeywords","research","researchTopic","targetKeyword","outline","createContentOutline","writeArticleContent","optimizedContent","optimizeContent","metadata","generateMetadata","split","readTime","ceil","seoScore","calculateSEOScore","generatedAt","contentType","substring","sections","outlineText","stringify","max_tokens","keywordDensity","calculateKeywordDensity","metaTitle","metaDescription","slug","slugify","audit","url","issues","recommendations","checks","checkPageSpeed","checkMobileResponsiveness","checkSSL","checkRobotsTxt","checkSitemap","checkStructuredData","Promise","allSettled","index","status","value","fixes","generateFixInstructions","severity","description","hasSSL","startsWith","robotsUrl","URL","href","get","issuesList","i","analysis","opportunities","threats","competitor","competitorData","analyzeCompetitor","insights","generateCompetitorInsights","competitorUrl","estimatedTraffic","position","backlinks","domainRating","contentGaps","campaign","targetKeywords","prospects","outreachEmails","findLinkProspects","prospect","email","generateOutreachEmail","types","domain","traffic","relevance","contactEmail","createdAt","googleBusinessProfile","optimizeGBP","localCitations","generateLocalCitations","localContent","createLocalContent","reviewStrategy","createReviewStrategy","_clientData$services","services","citations","site","priority","instructions","_clientData$services2","localPages","localBlogPosts","platforms","strategy","emailTemplates","generateReviewRequestTemplates","responseTemplates","generateReviewResponseTemplates","positive","negative","neutral","schemas","createOrganizationSchema","createLocalBusinessSchema","createArticleSchemaTemplate","createFAQSchema","implementation","logoUrl","address","postalCode","country","phone","priceRange","latitude","longitude","hours","template","faqs","faq","question","answer","_results$deliverables","_results$deliverables2","_results$deliverables3","_results$deliverables4","_results$deliverables5","_results$deliverables6","summaryPrompt","executiveSummary","reportDate","keyMetrics","keywordsResearched","contentPieces","technicalIssuesFound","issuesFixed","linkProspects","outreachEmailsSent","nextMonthPlan","generateNextMonthPlan","words","toLowerCase","keywordWords","keywordCount","filter","w","includes","score","density","min","text","replace","trim","cluster","find","c","some","ck","name","clusterIntent","ms","resolve","setTimeout"],"sources":["/Users/siteoptz/siteoptz-scraping/src/services/AISEOService.js"],"sourcesContent":["// AI-Powered SEO Service\n// Comprehensive SEO automation for white-label reselling\n\nimport axios from 'axios';\n\nclass AISEOService {\n  constructor() {\n    this.openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\n    this.anthropicApiKey = process.env.REACT_APP_ANTHROPIC_API_KEY;\n    this.perplexityApiKey = process.env.REACT_APP_PERPLEXITY_API_KEY;\n    this.ahrefsApiKey = process.env.REACT_APP_AHREFS_API_KEY;\n    this.semrushApiKey = process.env.REACT_APP_SEMRUSH_API_KEY;\n    \n    // Base URLs\n    this.openaiBaseUrl = 'https://api.openai.com/v1';\n    this.anthropicBaseUrl = 'https://api.anthropic.com/v1';\n    this.perplexityBaseUrl = 'https://api.perplexity.ai';\n  }\n\n  /**\n   * MAIN SERVICE METHOD\n   * Complete SEO service for one client/month\n   */\n  async executeMonthlyService(clientData) {\n    console.log('🚀 Starting AI-Powered SEO Service for:', clientData.businessName);\n\n    const results = {\n      client: clientData,\n      timestamp: new Date().toISOString(),\n      deliverables: {}\n    };\n\n    try {\n      // 1. Keyword Research & Clustering\n      console.log('📊 Step 1: AI Keyword Research...');\n      results.deliverables.keywords = await this.performKeywordResearch(clientData);\n\n      // 2. Content Generation (Blog Posts)\n      console.log('✍️ Step 2: Generating AI Content...');\n      results.deliverables.content = await this.generateMonthlyContent(\n        clientData,\n        results.deliverables.keywords\n      );\n\n      // 3. Technical SEO Audit\n      console.log('🔧 Step 3: Technical SEO Audit...');\n      results.deliverables.technicalAudit = await this.performTechnicalAudit(\n        clientData.websiteUrl\n      );\n\n      // 4. Competitor Analysis\n      console.log('🎯 Step 4: Competitor Analysis...');\n      results.deliverables.competitorAnalysis = await this.analyzeCompetitors(\n        clientData.industry,\n        clientData.competitors || []\n      );\n\n      // 5. Link Building Opportunities\n      console.log('🔗 Step 5: Link Building Strategy...');\n      results.deliverables.linkBuilding = await this.generateLinkBuildingCampaign(\n        clientData,\n        results.deliverables.keywords\n      );\n\n      // 6. Local SEO (if applicable)\n      if (clientData.localBusiness) {\n        console.log('📍 Step 6: Local SEO Optimization...');\n        results.deliverables.localSEO = await this.optimizeLocalSEO(clientData);\n      }\n\n      // 7. Schema Markup Generation\n      console.log('🏷️ Step 7: Schema Markup...');\n      results.deliverables.schema = await this.generateSchemaMarkup(clientData);\n\n      // 8. Monthly Report Generation\n      console.log('📈 Step 8: Generating Report...');\n      results.deliverables.report = await this.generateMonthlyReport(results);\n\n      console.log('✅ AI SEO Service Complete!');\n      return results;\n\n    } catch (error) {\n      console.error('❌ Error in AI SEO Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 1. AI KEYWORD RESEARCH\n   * Generate 100+ keywords with clustering and prioritization\n   */\n  async performKeywordResearch(clientData) {\n    const { industry, location, businessType, targetAudience } = clientData;\n\n    // Step 1: Generate seed keywords with GPT-4\n    const seedKeywords = await this.generateSeedKeywords(industry, businessType, targetAudience);\n\n    // Step 2: Expand keywords with variations\n    const expandedKeywords = await this.expandKeywords(seedKeywords);\n\n    // Step 3: Get search volume and difficulty (simulated or via API)\n    const keywordsWithMetrics = await this.enrichKeywordsWithMetrics(expandedKeywords);\n\n    // Step 4: Cluster keywords by intent\n    const clusteredKeywords = await this.clusterKeywordsByIntent(keywordsWithMetrics);\n\n    // Step 5: Prioritize keywords\n    const prioritizedKeywords = this.prioritizeKeywords(clusteredKeywords);\n\n    return {\n      totalKeywords: prioritizedKeywords.length,\n      clusters: this.groupByCluster(prioritizedKeywords),\n      topOpportunities: prioritizedKeywords.slice(0, 20),\n      contentIdeas: await this.generateContentIdeas(prioritizedKeywords)\n    };\n  }\n\n  async generateSeedKeywords(industry, businessType, targetAudience) {\n    try {\n      const prompt = `You are an expert SEO strategist. Generate a comprehensive list of seed keywords for a ${businessType} business in the ${industry} industry targeting ${targetAudience}.\n\nInclude:\n- Primary service/product keywords\n- Industry-specific terms\n- Problem-solution keywords\n- Comparison keywords\n- Question-based keywords\n- Long-tail variations\n\nFormat as a JSON array of objects with: {\"keyword\": \"example\", \"intent\": \"transactional|informational|navigational|commercial\"}\n\nGenerate 50 seed keywords.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert SEO and keyword research specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.keywords || [];\n    } catch (error) {\n      console.error('Error generating seed keywords:', error.response?.data || error.message);\n      // Return fallback keywords\n      return this.getFallbackSeedKeywords(industry);\n    }\n  }\n\n  async expandKeywords(seedKeywords) {\n    // Expand each seed keyword with variations\n    const expansions = [];\n    const modifiers = [\n      'best', 'top', 'affordable', 'near me', 'services', 'company',\n      'how to', 'what is', 'cost of', 'reviews', 'vs', 'guide'\n    ];\n\n    seedKeywords.forEach(seed => {\n      expansions.push(seed);\n      \n      // Add modifier variations\n      modifiers.forEach(modifier => {\n        expansions.push({\n          keyword: `${modifier} ${seed.keyword}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n        \n        expansions.push({\n          keyword: `${seed.keyword} ${modifier}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n      });\n    });\n\n    return expansions.slice(0, 200); // Limit to 200 expanded keywords\n  }\n\n  async enrichKeywordsWithMetrics(keywords) {\n    // Simulate keyword metrics (in production, use Ahrefs/SEMrush API)\n    return keywords.map(kw => ({\n      ...kw,\n      searchVolume: Math.floor(Math.random() * 10000) + 100,\n      difficulty: Math.floor(Math.random() * 100),\n      cpc: (Math.random() * 10).toFixed(2),\n      trend: Math.random() > 0.5 ? 'up' : 'stable'\n    }));\n  }\n\n  async clusterKeywordsByIntent(keywords) {\n    try {\n      // Use GPT-4 to intelligently cluster keywords\n      const keywordList = keywords.slice(0, 100).map(k => k.keyword).join(', ');\n      \n      const prompt = `Analyze these keywords and group them into logical clusters based on user intent and topic similarity:\n\n${keywordList}\n\nReturn a JSON object with clusters like:\n{\n  \"clusters\": [\n    {\n      \"name\": \"cluster name\",\n      \"intent\": \"informational/transactional/commercial/navigational\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert SEO and keyword clustering specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.3\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const clusters = JSON.parse(response.data.choices[0].message.content);\n      \n      // Map back to full keyword objects\n      return this.mapClustersToKeywords(clusters.clusters, keywords);\n    } catch (error) {\n      console.error('Error clustering keywords:', error.message);\n      return this.fallbackClustering(keywords);\n    }\n  }\n\n  prioritizeKeywords(clusteredKeywords) {\n    // Calculate priority score: (SearchVolume / Difficulty) * Intent Weight\n    const intentWeights = {\n      transactional: 1.5,\n      commercial: 1.3,\n      informational: 1.0,\n      navigational: 0.8\n    };\n\n    return clusteredKeywords\n      .map(kw => ({\n        ...kw,\n        priorityScore: ((kw.searchVolume / (kw.difficulty + 1)) * \n                       (intentWeights[kw.intent] || 1))\n      }))\n      .sort((a, b) => b.priorityScore - a.priorityScore);\n  }\n\n  async generateContentIdeas(keywords) {\n    const topKeywords = keywords.slice(0, 10);\n    \n    try {\n      const prompt = `Based on these high-priority keywords, generate 20 blog post titles that would rank well:\n\n${topKeywords.map(k => `- ${k.keyword}`).join('\\n')}\n\nReturn a JSON array of objects with: {\"title\": \"Blog Title\", \"targetKeyword\": \"main keyword\", \"contentType\": \"how-to|guide|listicle|comparison|case-study\"}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content strategist and SEO specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.ideas || result.titles || [];\n    } catch (error) {\n      console.error('Error generating content ideas:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 2. AI CONTENT GENERATION\n   * Generate 10-20 blog posts per month\n   */\n  async generateMonthlyContent(clientData, keywordData) {\n    const contentIdeas = keywordData.contentIdeas.slice(0, 15);\n    const generatedContent = [];\n\n    for (const idea of contentIdeas) {\n      try {\n        console.log(`  📝 Generating: \"${idea.title}\"`);\n        \n        const article = await this.generateBlogPost(\n          idea,\n          clientData,\n          keywordData.topOpportunities\n        );\n        \n        generatedContent.push(article);\n        \n        // Rate limiting: wait 2 seconds between articles\n        await this.sleep(2000);\n      } catch (error) {\n        console.error(`Error generating article \"${idea.title}\":`, error.message);\n      }\n    }\n\n    return {\n      totalArticles: generatedContent.length,\n      articles: generatedContent,\n      totalWords: generatedContent.reduce((sum, a) => sum + a.wordCount, 0)\n    };\n  }\n\n  async generateBlogPost(idea, clientData, relatedKeywords) {\n    try {\n      // Step 1: Research with Perplexity (if available) or GPT-4\n      const research = await this.researchTopic(idea.title, idea.targetKeyword);\n\n      // Step 2: Create outline\n      const outline = await this.createContentOutline(idea, research, relatedKeywords);\n\n      // Step 3: Generate full article with GPT-4\n      const content = await this.writeArticleContent(idea, outline, clientData, research);\n\n      // Step 4: Optimize for SEO\n      const optimizedContent = await this.optimizeContent(content, idea.targetKeyword);\n\n      // Step 5: Generate meta data\n      const metadata = await this.generateMetadata(idea, optimizedContent);\n\n      return {\n        title: idea.title,\n        targetKeyword: idea.targetKeyword,\n        content: optimizedContent,\n        outline: outline,\n        metadata: metadata,\n        wordCount: optimizedContent.split(' ').length,\n        readTime: Math.ceil(optimizedContent.split(' ').length / 200),\n        seoScore: this.calculateSEOScore(optimizedContent, idea.targetKeyword),\n        generatedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating blog post:', error.message);\n      throw error;\n    }\n  }\n\n  async researchTopic(title, keyword) {\n    try {\n      const prompt = `Research and provide key facts, statistics, and insights about: \"${title}\" focusing on the keyword \"${keyword}\". Include recent data, expert opinions, and actionable insights.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert researcher providing accurate, up-to-date information.' },\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.4\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error researching topic:', error.message);\n      return '';\n    }\n  }\n\n  async createContentOutline(idea, research, relatedKeywords) {\n    try {\n      const prompt = `Create a detailed blog post outline for: \"${idea.title}\"\n\nTarget keyword: ${idea.targetKeyword}\nContent type: ${idea.contentType}\nRelated keywords to include: ${relatedKeywords.slice(0, 5).map(k => k.keyword).join(', ')}\n\nResearch context: ${research.substring(0, 500)}\n\nReturn a JSON object with:\n{\n  \"introduction\": \"Hook and overview\",\n  \"sections\": [\n    {\"heading\": \"H2 heading\", \"subheadings\": [\"H3\", \"H3\"], \"keyPoints\": [\"point1\", \"point2\"]}\n  ],\n  \"conclusion\": \"Summary and CTA\"\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content strategist creating SEO-optimized outlines.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error creating outline:', error.message);\n      return { sections: [] };\n    }\n  }\n\n  async writeArticleContent(idea, outline, clientData, research) {\n    try {\n      const outlineText = JSON.stringify(outline, null, 2);\n      \n      const prompt = `Write a comprehensive, engaging blog post following this outline:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nBusiness Context: ${clientData.businessName} - ${clientData.industry}\n\nOutline:\n${outlineText}\n\nResearch:\n${research}\n\nRequirements:\n- 1500-2000 words\n- Conversational yet professional tone\n- Include the target keyword naturally (2-3% density)\n- Use short paragraphs (2-3 sentences)\n- Include transition words\n- Add bullet points and numbered lists\n- SEO-optimized headers (H2, H3)\n- Strong introduction with hook\n- Clear conclusion with CTA\n- Naturally mention ${clientData.businessName} where relevant\n\nWrite the complete article in markdown format.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content writer specializing in SEO-optimized, engaging blog posts.' },\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.7,\n          max_tokens: 4000\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error writing article:', error.message);\n      return '';\n    }\n  }\n\n  async optimizeContent(content, targetKeyword) {\n    // Check keyword density\n    const keywordDensity = this.calculateKeywordDensity(content, targetKeyword);\n    \n    if (keywordDensity < 0.015) {\n      // Add keyword variations naturally\n      console.log(`  ⚠️ Low keyword density (${(keywordDensity * 100).toFixed(2)}%), optimizing...`);\n      // In production, use AI to naturally add keywords\n    }\n\n    // Add internal link placeholders\n    const optimizedContent = content + '\\n\\n[INTERNAL_LINK_PLACEHOLDER]';\n\n    return optimizedContent;\n  }\n\n  async generateMetadata(idea, content) {\n    try {\n      const prompt = `Generate SEO metadata for this article:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nContent Preview: ${content.substring(0, 500)}...\n\nReturn JSON with:\n{\n  \"metaTitle\": \"60 chars max, includes target keyword\",\n  \"metaDescription\": \"150-160 chars, compelling, includes keyword\",\n  \"focusKeyword\": \"main keyword\",\n  \"slug\": \"url-friendly-slug\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an SEO expert creating compelling metadata.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating metadata:', error.message);\n      return {\n        metaTitle: idea.title,\n        metaDescription: '',\n        slug: this.slugify(idea.title)\n      };\n    }\n  }\n\n  /**\n   * 3. TECHNICAL SEO AUDIT\n   */\n  async performTechnicalAudit(websiteUrl) {\n    console.log(`  🔍 Auditing: ${websiteUrl}`);\n\n    const audit = {\n      url: websiteUrl,\n      timestamp: new Date().toISOString(),\n      issues: [],\n      recommendations: []\n    };\n\n    // Check various technical SEO factors\n    const checks = [\n      this.checkPageSpeed(websiteUrl),\n      this.checkMobileResponsiveness(websiteUrl),\n      this.checkSSL(websiteUrl),\n      this.checkRobotsTxt(websiteUrl),\n      this.checkSitemap(websiteUrl),\n      this.checkStructuredData(websiteUrl)\n    ];\n\n    const results = await Promise.allSettled(checks);\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        audit.issues.push(...result.value.issues);\n        audit.recommendations.push(...result.value.recommendations);\n      }\n    });\n\n    // Generate fix instructions with AI\n    audit.fixes = await this.generateFixInstructions(audit.issues);\n\n    return audit;\n  }\n\n  async checkPageSpeed(url) {\n    // Simulate page speed check (use PageSpeed Insights API in production)\n    return {\n      issues: [\n        { type: 'performance', severity: 'medium', description: 'Page load time exceeds 3 seconds' }\n      ],\n      recommendations: [\n        'Optimize images (use WebP format)',\n        'Minify CSS and JavaScript',\n        'Enable browser caching',\n        'Use a CDN'\n      ]\n    };\n  }\n\n  async checkMobileResponsiveness(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure viewport meta tag is present', 'Test on various devices']\n    };\n  }\n\n  async checkSSL(url) {\n    const hasSSL = url.startsWith('https://');\n    return {\n      issues: hasSSL ? [] : [{ type: 'security', severity: 'high', description: 'No SSL certificate detected' }],\n      recommendations: hasSSL ? [] : ['Install SSL certificate immediately']\n    };\n  }\n\n  async checkRobotsTxt(url) {\n    try {\n      const robotsUrl = new URL('/robots.txt', url).href;\n      await axios.get(robotsUrl);\n      return {\n        issues: [],\n        recommendations: ['Robots.txt found and accessible']\n      };\n    } catch (error) {\n      return {\n        issues: [{ type: 'indexability', severity: 'low', description: 'No robots.txt file found' }],\n        recommendations: ['Create a robots.txt file']\n      };\n    }\n  }\n\n  async checkSitemap(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure XML sitemap is submitted to Google Search Console']\n    };\n  }\n\n  async checkStructuredData(url) {\n    return {\n      issues: [],\n      recommendations: ['Add schema markup for better rich snippets']\n    };\n  }\n\n  async generateFixInstructions(issues) {\n    if (issues.length === 0) return [];\n\n    try {\n      const issuesList = issues.map(i => `- ${i.description}`).join('\\n');\n      \n      const prompt = `Provide step-by-step fix instructions for these technical SEO issues:\n\n${issuesList}\n\nReturn JSON array with:\n[\n  {\n    \"issue\": \"issue description\",\n    \"priority\": \"high|medium|low\",\n    \"steps\": [\"step 1\", \"step 2\"],\n    \"estimatedTime\": \"time to fix\"\n  }\n]`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a technical SEO expert providing actionable fix instructions.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.3\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.fixes || [];\n    } catch (error) {\n      console.error('Error generating fix instructions:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 4. COMPETITOR ANALYSIS\n   */\n  async analyzeCompetitors(industry, competitors) {\n    console.log(`  🎯 Analyzing competitors in ${industry}...`);\n\n    const analysis = {\n      industry,\n      competitors: [],\n      opportunities: [],\n      threats: []\n    };\n\n    // Analyze each competitor\n    for (const competitor of competitors.slice(0, 3)) {\n      try {\n        const competitorData = await this.analyzeCompetitor(competitor);\n        analysis.competitors.push(competitorData);\n      } catch (error) {\n        console.error(`Error analyzing ${competitor}:`, error.message);\n      }\n    }\n\n    // Generate strategic insights\n    analysis.insights = await this.generateCompetitorInsights(analysis.competitors);\n    \n    return analysis;\n  }\n\n  async analyzeCompetitor(competitorUrl) {\n    // Simulate competitor analysis (use Ahrefs/SEMrush in production)\n    return {\n      url: competitorUrl,\n      estimatedTraffic: Math.floor(Math.random() * 100000) + 10000,\n      topKeywords: [\n        { keyword: 'example keyword 1', position: 3, searchVolume: 5000 },\n        { keyword: 'example keyword 2', position: 5, searchVolume: 3000 }\n      ],\n      backlinks: Math.floor(Math.random() * 10000) + 1000,\n      domainRating: Math.floor(Math.random() * 100),\n      contentGaps: []\n    };\n  }\n\n  async generateCompetitorInsights(competitors) {\n    try {\n      const competitorData = JSON.stringify(competitors, null, 2);\n      \n      const prompt = `Analyze these competitor SEO metrics and provide strategic insights:\n\n${competitorData}\n\nReturn JSON with:\n{\n  \"strengths\": [\"what competitors do well\"],\n  \"weaknesses\": [\"gaps we can exploit\"],\n  \"opportunities\": [\"specific actions to outrank them\"],\n  \"contentGaps\": [\"topics they rank for that we should target\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a competitive SEO analyst providing strategic insights.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating competitor insights:', error.message);\n      return {};\n    }\n  }\n\n  /**\n   * 5. LINK BUILDING AUTOMATION\n   */\n  async generateLinkBuildingCampaign(clientData, keywords) {\n    console.log('  🔗 Creating link building campaign...');\n\n    const campaign = {\n      targetKeywords: keywords.topOpportunities.slice(0, 5),\n      prospects: [],\n      outreachEmails: []\n    };\n\n    // Find link prospects\n    campaign.prospects = await this.findLinkProspects(clientData.industry, keywords);\n\n    // Generate outreach emails\n    for (const prospect of campaign.prospects.slice(0, 10)) {\n      const email = await this.generateOutreachEmail(prospect, clientData);\n      campaign.outreachEmails.push(email);\n    }\n\n    return campaign;\n  }\n\n  async findLinkProspects(industry, keywords) {\n    // Simulate finding link prospects (use Ahrefs/Hunter.io in production)\n    const prospects = [];\n    const types = ['blog', 'news site', 'industry publication', 'resource page'];\n\n    for (let i = 0; i < 20; i++) {\n      prospects.push({\n        domain: `example-site-${i}.com`,\n        type: types[Math.floor(Math.random() * types.length)],\n        domainRating: Math.floor(Math.random() * 100),\n        traffic: Math.floor(Math.random() * 50000) + 1000,\n        relevance: Math.random(),\n        contactEmail: `editor@example-site-${i}.com`\n      });\n    }\n\n    return prospects.sort((a, b) => b.relevance - a.relevance);\n  }\n\n  async generateOutreachEmail(prospect, clientData) {\n    try {\n      const prompt = `Write a personalized link building outreach email for:\n\nProspect: ${prospect.domain} (${prospect.type})\nOur Business: ${clientData.businessName} - ${clientData.industry}\n\nRequirements:\n- Personalized subject line\n- Brief, friendly introduction\n- Value proposition (why link to us)\n- Specific content to link to\n- Clear call-to-action\n- Professional signature\n- Keep under 150 words\n\nReturn JSON with:\n{\n  \"subject\": \"email subject\",\n  \"body\": \"email body\",\n  \"followUp\": \"follow-up email if no response\"\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert at writing persuasive, personalized outreach emails.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const email = JSON.parse(response.data.choices[0].message.content);\n      return {\n        prospect,\n        ...email,\n        status: 'draft',\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating outreach email:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 6. LOCAL SEO OPTIMIZATION\n   */\n  async optimizeLocalSEO(clientData) {\n    console.log('  📍 Optimizing local SEO...');\n\n    return {\n      googleBusinessProfile: await this.optimizeGBP(clientData),\n      localCitations: await this.generateLocalCitations(clientData),\n      localContent: await this.createLocalContent(clientData),\n      reviewStrategy: await this.createReviewStrategy(clientData)\n    };\n  }\n\n  async optimizeGBP(clientData) {\n    try {\n      const prompt = `Create an optimized Google Business Profile description for:\n\nBusiness: ${clientData.businessName}\nIndustry: ${clientData.industry}\nLocation: ${clientData.location}\nServices: ${clientData.services?.join(', ') || 'various services'}\n\nReturn JSON with:\n{\n  \"businessDescription\": \"compelling 750-char description\",\n  \"services\": [\"service 1\", \"service 2\"],\n  \"attributes\": [\"attribute1\", \"attribute2\"],\n  \"posts\": [{\"title\": \"post title\", \"content\": \"post content\"}]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a local SEO expert specializing in Google Business Profile optimization.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error optimizing GBP:', error.message);\n      return {};\n    }\n  }\n\n  async generateLocalCitations(clientData) {\n    // List of local citation sites\n    return {\n      citations: [\n        { site: 'Yelp', url: 'https://yelp.com', priority: 'high', status: 'pending' },\n        { site: 'Yellow Pages', url: 'https://yellowpages.com', priority: 'high', status: 'pending' },\n        { site: 'Better Business Bureau', url: 'https://bbb.org', priority: 'medium', status: 'pending' },\n        { site: 'Foursquare', url: 'https://foursquare.com', priority: 'medium', status: 'pending' },\n        { site: 'Bing Places', url: 'https://bingplaces.com', priority: 'high', status: 'pending' }\n      ],\n      instructions: 'Submit consistent NAP (Name, Address, Phone) across all platforms'\n    };\n  }\n\n  async createLocalContent(clientData) {\n    // Generate location-specific content ideas\n    return {\n      localPages: [\n        `${clientData.services?.[0] || 'Services'} in ${clientData.location}`,\n        `Best ${clientData.industry} near ${clientData.location}`,\n        `${clientData.location} ${clientData.industry} Guide`\n      ],\n      localBlogPosts: [\n        `Top 10 ${clientData.industry} Tips for ${clientData.location} Residents`,\n        `${clientData.location} Community Guide`,\n        `Why Choose ${clientData.businessName} in ${clientData.location}`\n      ]\n    };\n  }\n\n  async createReviewStrategy(clientData) {\n    return {\n      platforms: ['Google', 'Yelp', 'Facebook'],\n      strategy: 'Send review requests 3-5 days after service completion',\n      emailTemplates: await this.generateReviewRequestTemplates(clientData),\n      responseTemplates: await this.generateReviewResponseTemplates(clientData)\n    };\n  }\n\n  async generateReviewRequestTemplates(clientData) {\n    try {\n      const prompt = `Create 3 friendly review request email templates for ${clientData.businessName}. Make them warm, appreciative, and include direct links to review platforms.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      return 'Error generating templates';\n    }\n  }\n\n  async generateReviewResponseTemplates(clientData) {\n    return {\n      positive: `Thank you so much for your wonderful review! We're thrilled to hear about your positive experience with ${clientData.businessName}. We look forward to serving you again!`,\n      negative: `Thank you for your feedback. We're sorry to hear about your experience. We'd love the opportunity to make this right. Please contact us directly at [contact info].`,\n      neutral: `Thank you for taking the time to leave a review. We appreciate your feedback and are always looking to improve our services.`\n    };\n  }\n\n  /**\n   * 7. SCHEMA MARKUP GENERATION\n   */\n  async generateSchemaMarkup(clientData) {\n    console.log('  🏷️ Generating schema markup...');\n\n    const schemas = [];\n\n    // Organization schema\n    schemas.push(this.createOrganizationSchema(clientData));\n\n    // Local Business schema (if applicable)\n    if (clientData.localBusiness) {\n      schemas.push(this.createLocalBusinessSchema(clientData));\n    }\n\n    // Article schema (for blog posts)\n    schemas.push(this.createArticleSchemaTemplate(clientData));\n\n    // FAQ schema\n    schemas.push(await this.createFAQSchema(clientData));\n\n    return {\n      schemas,\n      implementation: 'Add these JSON-LD scripts to your website <head> section'\n    };\n  }\n\n  createOrganizationSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      \"name\": clientData.businessName,\n      \"url\": clientData.websiteUrl,\n      \"logo\": clientData.logoUrl || '',\n      \"description\": clientData.description || '',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"contactPoint\": {\n        \"@type\": \"ContactPoint\",\n        \"telephone\": clientData.phone || '',\n        \"contactType\": \"customer service\"\n      }\n    };\n  }\n\n  createLocalBusinessSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"LocalBusiness\",\n      \"name\": clientData.businessName,\n      \"image\": clientData.logoUrl || '',\n      \"url\": clientData.websiteUrl,\n      \"telephone\": clientData.phone || '',\n      \"priceRange\": clientData.priceRange || '$$',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": clientData.latitude || 0,\n        \"longitude\": clientData.longitude || 0\n      },\n      \"openingHoursSpecification\": clientData.hours || []\n    };\n  }\n\n  createArticleSchemaTemplate(clientData) {\n    return {\n      template: 'article',\n      schema: {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Article\",\n        \"headline\": \"[ARTICLE_TITLE]\",\n        \"image\": \"[ARTICLE_IMAGE_URL]\",\n        \"author\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName\n        },\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName,\n          \"logo\": {\n            \"@type\": \"ImageObject\",\n            \"url\": clientData.logoUrl || ''\n          }\n        },\n        \"datePublished\": \"[PUBLISH_DATE]\",\n        \"dateModified\": \"[MODIFIED_DATE]\"\n      }\n    };\n  }\n\n  async createFAQSchema(clientData) {\n    try {\n      const prompt = `Generate 5 frequently asked questions and answers for ${clientData.businessName} in the ${clientData.industry} industry.\n\nReturn JSON with:\n{\n  \"faqs\": [\n    {\"question\": \"question text\", \"answer\": \"detailed answer\"}\n  ]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const faqs = JSON.parse(response.data.choices[0].message.content);\n\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"FAQPage\",\n        \"mainEntity\": faqs.faqs.map(faq => ({\n          \"@type\": \"Question\",\n          \"name\": faq.question,\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": faq.answer\n          }\n        }))\n      };\n    } catch (error) {\n      console.error('Error creating FAQ schema:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 8. MONTHLY REPORT GENERATION\n   */\n  async generateMonthlyReport(results) {\n    console.log('  📊 Generating comprehensive report...');\n\n    try {\n      const summaryPrompt = `Create an executive summary for this month's SEO work:\n\nKeywords researched: ${results.deliverables.keywords.totalKeywords}\nContent created: ${results.deliverables.content.totalArticles} articles (${results.deliverables.content.totalWords} words)\nTechnical issues found: ${results.deliverables.technicalAudit.issues.length}\nLink building prospects: ${results.deliverables.linkBuilding?.prospects?.length || 0}\n\nWrite a professional 2-3 paragraph summary highlighting the value delivered.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a professional SEO consultant writing client reports.' },\n            { role: 'user', content: summaryPrompt }\n          ],\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const executiveSummary = response.data.choices[0].message.content;\n\n      return {\n        reportDate: new Date().toISOString(),\n        client: results.client.businessName,\n        executiveSummary,\n        keyMetrics: {\n          keywordsResearched: results.deliverables.keywords.totalKeywords,\n          contentPieces: results.deliverables.content.totalArticles,\n          totalWords: results.deliverables.content.totalWords,\n          technicalIssuesFound: results.deliverables.technicalAudit.issues.length,\n          issuesFixed: 0, // Track over time\n          linkProspects: results.deliverables.linkBuilding?.prospects?.length || 0,\n          outreachEmailsSent: results.deliverables.linkBuilding?.outreachEmails?.length || 0\n        },\n        deliverables: results.deliverables,\n        nextMonthPlan: await this.generateNextMonthPlan(results)\n      };\n    } catch (error) {\n      console.error('Error generating report:', error.message);\n      return {\n        reportDate: new Date().toISOString(),\n        error: 'Error generating report'\n      };\n    }\n  }\n\n  async generateNextMonthPlan(results) {\n    try {\n      const prompt = `Based on this month's SEO work, suggest a strategic plan for next month. Focus on building upon current progress and addressing gaps.\n\nCurrent progress:\n- ${results.deliverables.keywords.totalKeywords} keywords researched\n- ${results.deliverables.content.totalArticles} articles created\n- ${results.deliverables.technicalAudit.issues.length} technical issues identified\n\nReturn JSON with:\n{\n  \"priorities\": [\"priority 1\", \"priority 2\"],\n  \"contentTopics\": [\"topic 1\", \"topic 2\"],\n  \"technicalFocus\": [\"focus area 1\"],\n  \"linkBuildingGoals\": [\"goal 1\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating next month plan:', error.message);\n      return {};\n    }\n  }\n\n  // ========== HELPER METHODS ==========\n\n  calculateKeywordDensity(content, keyword) {\n    const words = content.toLowerCase().split(/\\s+/);\n    const keywordWords = keyword.toLowerCase().split(/\\s+/);\n    const keywordCount = words.filter(w => keywordWords.includes(w)).length;\n    return keywordCount / words.length;\n  }\n\n  calculateSEOScore(content, keyword) {\n    let score = 0;\n    \n    // Keyword in content\n    if (content.toLowerCase().includes(keyword.toLowerCase())) score += 20;\n    \n    // Word count (1500-2000 ideal)\n    const wordCount = content.split(' ').length;\n    if (wordCount >= 1500 && wordCount <= 2500) score += 20;\n    else if (wordCount >= 1000) score += 10;\n    \n    // Headers present\n    if (content.includes('##')) score += 15;\n    if (content.includes('###')) score += 10;\n    \n    // Lists present\n    if (content.includes('-') || content.includes('1.')) score += 10;\n    \n    // Keyword density (1.5-2.5% ideal)\n    const density = this.calculateKeywordDensity(content, keyword);\n    if (density >= 0.015 && density <= 0.025) score += 25;\n    else if (density > 0) score += 10;\n    \n    return Math.min(score, 100);\n  }\n\n  slugify(text) {\n    return text\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  }\n\n  groupByCluster(keywords) {\n    const clusters = {};\n    keywords.forEach(kw => {\n      const cluster = kw.cluster || 'uncategorized';\n      if (!clusters[cluster]) clusters[cluster] = [];\n      clusters[cluster].push(kw);\n    });\n    return clusters;\n  }\n\n  mapClustersToKeywords(clusters, keywords) {\n    return keywords.map(kw => {\n      const cluster = clusters.find(c => \n        c.keywords.some(ck => ck.toLowerCase() === kw.keyword.toLowerCase())\n      );\n      return {\n        ...kw,\n        cluster: cluster?.name || 'uncategorized',\n        clusterIntent: cluster?.intent || kw.intent\n      };\n    });\n  }\n\n  fallbackClustering(keywords) {\n    // Simple fallback clustering by intent\n    return keywords.map(kw => ({\n      ...kw,\n      cluster: kw.intent || 'general'\n    }));\n  }\n\n  getFallbackSeedKeywords(industry) {\n    return [\n      { keyword: `${industry} services`, intent: 'commercial' },\n      { keyword: `best ${industry}`, intent: 'informational' },\n      { keyword: `${industry} near me`, intent: 'transactional' },\n      { keyword: `how to choose ${industry}`, intent: 'informational' },\n      { keyword: `${industry} cost`, intent: 'commercial' }\n    ];\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nexport default new AISEOService();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}