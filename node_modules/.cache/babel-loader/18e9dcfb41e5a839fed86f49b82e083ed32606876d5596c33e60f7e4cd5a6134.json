{"ast":null,"code":"import _objectSpread from\"/Users/siteoptz/siteoptz-scraping/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext();export const useUser=()=>{const context=useContext(UserContext);if(!context){throw new Error('useUser must be used within a UserProvider');}return context;};export const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[currentPlan,setCurrentPlan]=useState('free');const[loading,setLoading]=useState(true);useEffect(()=>{// Check for SSO token in URL to get user plan\nconst loadUser=async()=>{try{// Check URL for SSO token\nconst urlParams=new URLSearchParams(window.location.search);const ssoToken=urlParams.get('sso_token');let userData={id:'user_123',email:'user@example.com',name:'John Doe',plan:'free',subscription:null};if(ssoToken){try{// Decode the SSO token to get user info\nconst tokenData=JSON.parse(atob(ssoToken.split('.')[0]));userData={id:tokenData.userId||'user_123',email:tokenData.email||'user@example.com',name:tokenData.name||'John Doe',plan:tokenData.plan||'pro',// Default to pro if they have SSO token\nsubscription:null};// Store in localStorage for persistence\nlocalStorage.setItem('userPlan',userData.plan);localStorage.setItem('userEmail',userData.email);}catch(e){console.log('Could not parse SSO token:',e);}}else{// Check localStorage for saved plan\nconst savedPlan=localStorage.getItem('userPlan');const savedEmail=localStorage.getItem('userEmail');if(savedPlan){userData.plan=savedPlan;userData.email=savedEmail||userData.email;}}setUser(userData);setCurrentPlan(userData.plan);}catch(error){console.error('Error loading user:',error);}finally{setLoading(false);}};loadUser();},[]);const upgradePlan=async newPlan=>{try{setCurrentPlan(newPlan);// Update user plan in backend\nif(user){setUser(_objectSpread(_objectSpread({},user),{},{plan:newPlan}));}}catch(error){console.error('Error upgrading plan:',error);throw error;}};const value={user,currentPlan,loading,upgradePlan,setCurrentPlan};return/*#__PURE__*/_jsx(UserContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","UserContext","useUser","context","Error","UserProvider","_ref","children","user","setUser","currentPlan","setCurrentPlan","loading","setLoading","loadUser","urlParams","URLSearchParams","window","location","search","ssoToken","get","userData","id","email","name","plan","subscription","tokenData","JSON","parse","atob","split","userId","localStorage","setItem","e","console","log","savedPlan","getItem","savedEmail","error","upgradePlan","newPlan","_objectSpread","value","Provider"],"sources":["/Users/siteoptz/siteoptz-scraping/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst UserContext = createContext();\n\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [currentPlan, setCurrentPlan] = useState('free');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for SSO token in URL to get user plan\n    const loadUser = async () => {\n      try {\n        // Check URL for SSO token\n        const urlParams = new URLSearchParams(window.location.search);\n        const ssoToken = urlParams.get('sso_token');\n        \n        let userData = {\n          id: 'user_123',\n          email: 'user@example.com',\n          name: 'John Doe',\n          plan: 'free',\n          subscription: null\n        };\n        \n        if (ssoToken) {\n          try {\n            // Decode the SSO token to get user info\n            const tokenData = JSON.parse(atob(ssoToken.split('.')[0]));\n            userData = {\n              id: tokenData.userId || 'user_123',\n              email: tokenData.email || 'user@example.com',\n              name: tokenData.name || 'John Doe',\n              plan: tokenData.plan || 'pro', // Default to pro if they have SSO token\n              subscription: null\n            };\n            \n            // Store in localStorage for persistence\n            localStorage.setItem('userPlan', userData.plan);\n            localStorage.setItem('userEmail', userData.email);\n          } catch (e) {\n            console.log('Could not parse SSO token:', e);\n          }\n        } else {\n          // Check localStorage for saved plan\n          const savedPlan = localStorage.getItem('userPlan');\n          const savedEmail = localStorage.getItem('userEmail');\n          if (savedPlan) {\n            userData.plan = savedPlan;\n            userData.email = savedEmail || userData.email;\n          }\n        }\n        \n        setUser(userData);\n        setCurrentPlan(userData.plan);\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  const upgradePlan = async (newPlan) => {\n    try {\n      setCurrentPlan(newPlan);\n      // Update user plan in backend\n      if (user) {\n        setUser({ ...user, plan: newPlan });\n      }\n    } catch (error) {\n      console.error('Error upgrading plan:', error);\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    currentPlan,\n    loading,\n    upgradePlan,\n    setCurrentPlan\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}