{"ast":null,"code":"import _objectSpread from\"/Users/siteoptz/siteoptz-scraping/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// AI-Powered SEO Service\n// Comprehensive SEO automation for white-label reselling\nimport axios from'axios';class AISEOService{constructor(){this.openaiApiKey=process.env.REACT_APP_OPENAI_API_KEY;this.anthropicApiKey=process.env.REACT_APP_ANTHROPIC_API_KEY;this.perplexityApiKey=process.env.REACT_APP_PERPLEXITY_API_KEY;this.ahrefsApiKey=process.env.REACT_APP_AHREFS_API_KEY;this.semrushApiKey=process.env.REACT_APP_SEMRUSH_API_KEY;// Base URLs\nthis.openaiBaseUrl='https://api.openai.com/v1';this.anthropicBaseUrl='https://api.anthropic.com/v1';this.perplexityBaseUrl='https://api.perplexity.ai';}/**\n   * MAIN SERVICE METHOD\n   * Complete SEO service for one client/month\n   */async executeMonthlyService(clientData){console.log('🚀 Starting AI-Powered SEO Service for:',clientData.businessName);const results={client:clientData,timestamp:new Date().toISOString(),deliverables:{}};try{// 1. Keyword Research & Clustering\nconsole.log('📊 Step 1: AI Keyword Research...');results.deliverables.keywords=await this.performKeywordResearch(clientData);// 2. Content Generation (Blog Posts)\nconsole.log('✍️ Step 2: Generating AI Content...');results.deliverables.content=await this.generateMonthlyContent(clientData,results.deliverables.keywords);// 3. Technical SEO Audit\nconsole.log('🔧 Step 3: Technical SEO Audit...');results.deliverables.technicalAudit=await this.performTechnicalAudit(clientData.websiteUrl);// 4. Competitor Analysis\nconsole.log('🎯 Step 4: Competitor Analysis...');results.deliverables.competitorAnalysis=await this.analyzeCompetitors(clientData.industry,clientData.competitors||[]);// 5. Link Building Opportunities\nconsole.log('🔗 Step 5: Link Building Strategy...');results.deliverables.linkBuilding=await this.generateLinkBuildingCampaign(clientData,results.deliverables.keywords);// 6. Local SEO (if applicable)\nif(clientData.localBusiness){console.log('📍 Step 6: Local SEO Optimization...');results.deliverables.localSEO=await this.optimizeLocalSEO(clientData);}// 7. Schema Markup Generation\nconsole.log('🏷️ Step 7: Schema Markup...');results.deliverables.schema=await this.generateSchemaMarkup(clientData);// 8. Monthly Report Generation\nconsole.log('📈 Step 8: Generating Report...');results.deliverables.report=await this.generateMonthlyReport(results);console.log('✅ AI SEO Service Complete!');return results;}catch(error){console.error('❌ Error in AI SEO Service:',error);throw error;}}/**\n   * 1. AI KEYWORD RESEARCH\n   * Generate 100+ keywords with clustering and prioritization\n   */async performKeywordResearch(clientData){const{industry,location,businessType,targetAudience}=clientData;// Step 1: Generate seed keywords with GPT-4\nconst seedKeywords=await this.generateSeedKeywords(industry,businessType,targetAudience);// Step 2: Expand keywords with variations\nconst expandedKeywords=await this.expandKeywords(seedKeywords);// Step 3: Get search volume and difficulty (simulated or via API)\nconst keywordsWithMetrics=await this.enrichKeywordsWithMetrics(expandedKeywords);// Step 4: Cluster keywords by intent\nconst clusteredKeywords=await this.clusterKeywordsByIntent(keywordsWithMetrics);// Step 5: Prioritize keywords\nconst prioritizedKeywords=this.prioritizeKeywords(clusteredKeywords);return{totalKeywords:prioritizedKeywords.length,clusters:this.groupByCluster(prioritizedKeywords),topOpportunities:prioritizedKeywords.slice(0,20),contentIdeas:await this.generateContentIdeas(prioritizedKeywords)};}async generateSeedKeywords(industry,businessType,targetAudience){try{const prompt=\"You are an expert SEO strategist. Generate a comprehensive list of seed keywords for a \".concat(businessType,\" business in the \").concat(industry,\" industry targeting \").concat(targetAudience,\".\\n\\nInclude:\\n- Primary service/product keywords\\n- Industry-specific terms\\n- Problem-solution keywords\\n- Comparison keywords\\n- Question-based keywords\\n- Long-tail variations\\n\\nFormat as a JSON array of objects with: {\\\"keyword\\\": \\\"example\\\", \\\"intent\\\": \\\"transactional|informational|navigational|commercial\\\"}\\n\\nGenerate 50 seed keywords.\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert SEO and keyword research specialist.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.7},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const result=JSON.parse(response.data.choices[0].message.content);return result.keywords||[];}catch(error){var _error$response;console.error('Error generating seed keywords:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);// Return fallback keywords\nreturn this.getFallbackSeedKeywords(industry);}}async expandKeywords(seedKeywords){// Expand each seed keyword with variations\nconst expansions=[];const modifiers=['best','top','affordable','near me','services','company','how to','what is','cost of','reviews','vs','guide'];seedKeywords.forEach(seed=>{expansions.push(seed);// Add modifier variations\nmodifiers.forEach(modifier=>{expansions.push({keyword:\"\".concat(modifier,\" \").concat(seed.keyword),intent:seed.intent,type:'expanded'});expansions.push({keyword:\"\".concat(seed.keyword,\" \").concat(modifier),intent:seed.intent,type:'expanded'});});});return expansions.slice(0,200);// Limit to 200 expanded keywords\n}async enrichKeywordsWithMetrics(keywords){// Simulate keyword metrics (in production, use Ahrefs/SEMrush API)\nreturn keywords.map(kw=>_objectSpread(_objectSpread({},kw),{},{searchVolume:Math.floor(Math.random()*10000)+100,difficulty:Math.floor(Math.random()*100),cpc:(Math.random()*10).toFixed(2),trend:Math.random()>0.5?'up':'stable'}));}async clusterKeywordsByIntent(keywords){try{// Use GPT-4 to intelligently cluster keywords\nconst keywordList=keywords.slice(0,100).map(k=>k.keyword).join(', ');const prompt=\"Analyze these keywords and group them into logical clusters based on user intent and topic similarity:\\n\\n\".concat(keywordList,\"\\n\\nReturn a JSON object with clusters like:\\n{\\n  \\\"clusters\\\": [\\n    {\\n      \\\"name\\\": \\\"cluster name\\\",\\n      \\\"intent\\\": \\\"informational/transactional/commercial/navigational\\\",\\n      \\\"keywords\\\": [\\\"keyword1\\\", \\\"keyword2\\\"]\\n    }\\n  ]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert SEO and keyword clustering specialist.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.3},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const clusters=JSON.parse(response.data.choices[0].message.content);// Map back to full keyword objects\nreturn this.mapClustersToKeywords(clusters.clusters,keywords);}catch(error){console.error('Error clustering keywords:',error.message);return this.fallbackClustering(keywords);}}prioritizeKeywords(clusteredKeywords){// Calculate priority score: (SearchVolume / Difficulty) * Intent Weight\nconst intentWeights={transactional:1.5,commercial:1.3,informational:1.0,navigational:0.8};return clusteredKeywords.map(kw=>_objectSpread(_objectSpread({},kw),{},{priorityScore:kw.searchVolume/(kw.difficulty+1)*(intentWeights[kw.intent]||1)})).sort((a,b)=>b.priorityScore-a.priorityScore);}async generateContentIdeas(keywords){const topKeywords=keywords.slice(0,10);try{const prompt=\"Based on these high-priority keywords, generate 20 blog post titles that would rank well:\\n\\n\".concat(topKeywords.map(k=>\"- \".concat(k.keyword)).join('\\n'),\"\\n\\nReturn a JSON array of objects with: {\\\"title\\\": \\\"Blog Title\\\", \\\"targetKeyword\\\": \\\"main keyword\\\", \\\"contentType\\\": \\\"how-to|guide|listicle|comparison|case-study\\\"}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert content strategist and SEO specialist.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.8},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const result=JSON.parse(response.data.choices[0].message.content);return result.ideas||result.titles||[];}catch(error){console.error('Error generating content ideas:',error.message);return[];}}/**\n   * 2. AI CONTENT GENERATION\n   * Generate 10-20 blog posts per month\n   */async generateMonthlyContent(clientData,keywordData){const contentIdeas=keywordData.contentIdeas.slice(0,15);const generatedContent=[];for(const idea of contentIdeas){try{console.log(\"  \\uD83D\\uDCDD Generating: \\\"\".concat(idea.title,\"\\\"\"));const article=await this.generateBlogPost(idea,clientData,keywordData.topOpportunities);generatedContent.push(article);// Rate limiting: wait 2 seconds between articles\nawait this.sleep(2000);}catch(error){console.error(\"Error generating article \\\"\".concat(idea.title,\"\\\":\"),error.message);}}return{totalArticles:generatedContent.length,articles:generatedContent,totalWords:generatedContent.reduce((sum,a)=>sum+a.wordCount,0)};}async generateBlogPost(idea,clientData,relatedKeywords){try{// Step 1: Research with Perplexity (if available) or GPT-4\nconst research=await this.researchTopic(idea.title,idea.targetKeyword);// Step 2: Create outline\nconst outline=await this.createContentOutline(idea,research,relatedKeywords);// Step 3: Generate full article with GPT-4\nconst content=await this.writeArticleContent(idea,outline,clientData,research);// Step 4: Optimize for SEO\nconst optimizedContent=await this.optimizeContent(content,idea.targetKeyword);// Step 5: Generate meta data\nconst metadata=await this.generateMetadata(idea,optimizedContent);return{title:idea.title,targetKeyword:idea.targetKeyword,content:optimizedContent,outline:outline,metadata:metadata,wordCount:optimizedContent.split(' ').length,readTime:Math.ceil(optimizedContent.split(' ').length/200),seoScore:this.calculateSEOScore(optimizedContent,idea.targetKeyword),generatedAt:new Date().toISOString()};}catch(error){console.error('Error generating blog post:',error.message);throw error;}}async researchTopic(title,keyword){try{const prompt=\"Research and provide key facts, statistics, and insights about: \\\"\".concat(title,\"\\\" focusing on the keyword \\\"\").concat(keyword,\"\\\". Include recent data, expert opinions, and actionable insights.\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert researcher providing accurate, up-to-date information.'},{role:'user',content:prompt}],temperature:0.4},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return response.data.choices[0].message.content;}catch(error){console.error('Error researching topic:',error.message);return'';}}async createContentOutline(idea,research,relatedKeywords){try{const prompt=\"Create a detailed blog post outline for: \\\"\".concat(idea.title,\"\\\"\\n\\nTarget keyword: \").concat(idea.targetKeyword,\"\\nContent type: \").concat(idea.contentType,\"\\nRelated keywords to include: \").concat(relatedKeywords.slice(0,5).map(k=>k.keyword).join(', '),\"\\n\\nResearch context: \").concat(research.substring(0,500),\"\\n\\nReturn a JSON object with:\\n{\\n  \\\"introduction\\\": \\\"Hook and overview\\\",\\n  \\\"sections\\\": [\\n    {\\\"heading\\\": \\\"H2 heading\\\", \\\"subheadings\\\": [\\\"H3\\\", \\\"H3\\\"], \\\"keyPoints\\\": [\\\"point1\\\", \\\"point2\\\"]}\\n  ],\\n  \\\"conclusion\\\": \\\"Summary and CTA\\\"\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert content strategist creating SEO-optimized outlines.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.6},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return JSON.parse(response.data.choices[0].message.content);}catch(error){console.error('Error creating outline:',error.message);return{sections:[]};}}async writeArticleContent(idea,outline,clientData,research){try{const outlineText=JSON.stringify(outline,null,2);const prompt=\"Write a comprehensive, engaging blog post following this outline:\\n\\nTitle: \".concat(idea.title,\"\\nTarget Keyword: \").concat(idea.targetKeyword,\"\\nBusiness Context: \").concat(clientData.businessName,\" - \").concat(clientData.industry,\"\\n\\nOutline:\\n\").concat(outlineText,\"\\n\\nResearch:\\n\").concat(research,\"\\n\\nRequirements:\\n- 1500-2000 words\\n- Conversational yet professional tone\\n- Include the target keyword naturally (2-3% density)\\n- Use short paragraphs (2-3 sentences)\\n- Include transition words\\n- Add bullet points and numbered lists\\n- SEO-optimized headers (H2, H3)\\n- Strong introduction with hook\\n- Clear conclusion with CTA\\n- Naturally mention \").concat(clientData.businessName,\" where relevant\\n\\nWrite the complete article in markdown format.\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert content writer specializing in SEO-optimized, engaging blog posts.'},{role:'user',content:prompt}],temperature:0.7,max_tokens:4000},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return response.data.choices[0].message.content;}catch(error){console.error('Error writing article:',error.message);return'';}}async optimizeContent(content,targetKeyword){// Check keyword density\nconst keywordDensity=this.calculateKeywordDensity(content,targetKeyword);if(keywordDensity<0.015){// Add keyword variations naturally\nconsole.log(\"  \\u26A0\\uFE0F Low keyword density (\".concat((keywordDensity*100).toFixed(2),\"%), optimizing...\"));// In production, use AI to naturally add keywords\n}// Add internal link placeholders\nconst optimizedContent=content+'\\n\\n[INTERNAL_LINK_PLACEHOLDER]';return optimizedContent;}async generateMetadata(idea,content){try{const prompt=\"Generate SEO metadata for this article:\\n\\nTitle: \".concat(idea.title,\"\\nTarget Keyword: \").concat(idea.targetKeyword,\"\\nContent Preview: \").concat(content.substring(0,500),\"...\\n\\nReturn JSON with:\\n{\\n  \\\"metaTitle\\\": \\\"60 chars max, includes target keyword\\\",\\n  \\\"metaDescription\\\": \\\"150-160 chars, compelling, includes keyword\\\",\\n  \\\"focusKeyword\\\": \\\"main keyword\\\",\\n  \\\"slug\\\": \\\"url-friendly-slug\\\",\\n  \\\"tags\\\": [\\\"tag1\\\", \\\"tag2\\\", \\\"tag3\\\"]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an SEO expert creating compelling metadata.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.6},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return JSON.parse(response.data.choices[0].message.content);}catch(error){console.error('Error generating metadata:',error.message);return{metaTitle:idea.title,metaDescription:'',slug:this.slugify(idea.title)};}}/**\n   * 3. TECHNICAL SEO AUDIT\n   */async performTechnicalAudit(websiteUrl){console.log(\"  \\uD83D\\uDD0D Auditing: \".concat(websiteUrl));const audit={url:websiteUrl,timestamp:new Date().toISOString(),issues:[],recommendations:[]};// Check various technical SEO factors\nconst checks=[this.checkPageSpeed(websiteUrl),this.checkMobileResponsiveness(websiteUrl),this.checkSSL(websiteUrl),this.checkRobotsTxt(websiteUrl),this.checkSitemap(websiteUrl),this.checkStructuredData(websiteUrl)];const results=await Promise.allSettled(checks);results.forEach((result,index)=>{if(result.status==='fulfilled'){audit.issues.push(...result.value.issues);audit.recommendations.push(...result.value.recommendations);}});// Generate fix instructions with AI\naudit.fixes=await this.generateFixInstructions(audit.issues);return audit;}async checkPageSpeed(url){// Simulate page speed check (use PageSpeed Insights API in production)\nreturn{issues:[{type:'performance',severity:'medium',description:'Page load time exceeds 3 seconds'}],recommendations:['Optimize images (use WebP format)','Minify CSS and JavaScript','Enable browser caching','Use a CDN']};}async checkMobileResponsiveness(url){return{issues:[],recommendations:['Ensure viewport meta tag is present','Test on various devices']};}async checkSSL(url){const hasSSL=url.startsWith('https://');return{issues:hasSSL?[]:[{type:'security',severity:'high',description:'No SSL certificate detected'}],recommendations:hasSSL?[]:['Install SSL certificate immediately']};}async checkRobotsTxt(url){try{const robotsUrl=new URL('/robots.txt',url).href;await axios.get(robotsUrl);return{issues:[],recommendations:['Robots.txt found and accessible']};}catch(error){return{issues:[{type:'indexability',severity:'low',description:'No robots.txt file found'}],recommendations:['Create a robots.txt file']};}}async checkSitemap(url){return{issues:[],recommendations:['Ensure XML sitemap is submitted to Google Search Console']};}async checkStructuredData(url){return{issues:[],recommendations:['Add schema markup for better rich snippets']};}async generateFixInstructions(issues){if(issues.length===0)return[];try{const issuesList=issues.map(i=>\"- \".concat(i.description)).join('\\n');const prompt=\"Provide step-by-step fix instructions for these technical SEO issues:\\n\\n\".concat(issuesList,\"\\n\\nReturn JSON array with:\\n[\\n  {\\n    \\\"issue\\\": \\\"issue description\\\",\\n    \\\"priority\\\": \\\"high|medium|low\\\",\\n    \\\"steps\\\": [\\\"step 1\\\", \\\"step 2\\\"],\\n    \\\"estimatedTime\\\": \\\"time to fix\\\"\\n  }\\n]\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are a technical SEO expert providing actionable fix instructions.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.3},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const result=JSON.parse(response.data.choices[0].message.content);return result.fixes||[];}catch(error){console.error('Error generating fix instructions:',error.message);return[];}}/**\n   * 4. COMPETITOR ANALYSIS\n   */async analyzeCompetitors(industry,competitors){console.log(\"  \\uD83C\\uDFAF Analyzing competitors in \".concat(industry,\"...\"));const analysis={industry,competitors:[],opportunities:[],threats:[]};// Analyze each competitor\nfor(const competitor of competitors.slice(0,3)){try{const competitorData=await this.analyzeCompetitor(competitor);analysis.competitors.push(competitorData);}catch(error){console.error(\"Error analyzing \".concat(competitor,\":\"),error.message);}}// Generate strategic insights\nanalysis.insights=await this.generateCompetitorInsights(analysis.competitors);return analysis;}async analyzeCompetitor(competitorUrl){// Simulate competitor analysis (use Ahrefs/SEMrush in production)\nreturn{url:competitorUrl,estimatedTraffic:Math.floor(Math.random()*100000)+10000,topKeywords:[{keyword:'example keyword 1',position:3,searchVolume:5000},{keyword:'example keyword 2',position:5,searchVolume:3000}],backlinks:Math.floor(Math.random()*10000)+1000,domainRating:Math.floor(Math.random()*100),contentGaps:[]};}async generateCompetitorInsights(competitors){try{const competitorData=JSON.stringify(competitors,null,2);const prompt=\"Analyze these competitor SEO metrics and provide strategic insights:\\n\\n\".concat(competitorData,\"\\n\\nReturn JSON with:\\n{\\n  \\\"strengths\\\": [\\\"what competitors do well\\\"],\\n  \\\"weaknesses\\\": [\\\"gaps we can exploit\\\"],\\n  \\\"opportunities\\\": [\\\"specific actions to outrank them\\\"],\\n  \\\"contentGaps\\\": [\\\"topics they rank for that we should target\\\"]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are a competitive SEO analyst providing strategic insights.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.6},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return JSON.parse(response.data.choices[0].message.content);}catch(error){console.error('Error generating competitor insights:',error.message);return{};}}/**\n   * 5. LINK BUILDING AUTOMATION\n   */async generateLinkBuildingCampaign(clientData,keywords){console.log('  🔗 Creating link building campaign...');const campaign={targetKeywords:keywords.topOpportunities.slice(0,5),prospects:[],outreachEmails:[]};// Find link prospects\ncampaign.prospects=await this.findLinkProspects(clientData.industry,keywords);// Generate outreach emails\nfor(const prospect of campaign.prospects.slice(0,10)){const email=await this.generateOutreachEmail(prospect,clientData);campaign.outreachEmails.push(email);}return campaign;}async findLinkProspects(industry,keywords){// Simulate finding link prospects (use Ahrefs/Hunter.io in production)\nconst prospects=[];const types=['blog','news site','industry publication','resource page'];for(let i=0;i<20;i++){prospects.push({domain:\"example-site-\".concat(i,\".com\"),type:types[Math.floor(Math.random()*types.length)],domainRating:Math.floor(Math.random()*100),traffic:Math.floor(Math.random()*50000)+1000,relevance:Math.random(),contactEmail:\"editor@example-site-\".concat(i,\".com\")});}return prospects.sort((a,b)=>b.relevance-a.relevance);}async generateOutreachEmail(prospect,clientData){try{const prompt=\"Write a personalized link building outreach email for:\\n\\nProspect: \".concat(prospect.domain,\" (\").concat(prospect.type,\")\\nOur Business: \").concat(clientData.businessName,\" - \").concat(clientData.industry,\"\\n\\nRequirements:\\n- Personalized subject line\\n- Brief, friendly introduction\\n- Value proposition (why link to us)\\n- Specific content to link to\\n- Clear call-to-action\\n- Professional signature\\n- Keep under 150 words\\n\\nReturn JSON with:\\n{\\n  \\\"subject\\\": \\\"email subject\\\",\\n  \\\"body\\\": \\\"email body\\\",\\n  \\\"followUp\\\": \\\"follow-up email if no response\\\"\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are an expert at writing persuasive, personalized outreach emails.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.8},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const email=JSON.parse(response.data.choices[0].message.content);return _objectSpread(_objectSpread({prospect},email),{},{status:'draft',createdAt:new Date().toISOString()});}catch(error){console.error('Error generating outreach email:',error.message);return null;}}/**\n   * 6. LOCAL SEO OPTIMIZATION\n   */async optimizeLocalSEO(clientData){console.log('  📍 Optimizing local SEO...');return{googleBusinessProfile:await this.optimizeGBP(clientData),localCitations:await this.generateLocalCitations(clientData),localContent:await this.createLocalContent(clientData),reviewStrategy:await this.createReviewStrategy(clientData)};}async optimizeGBP(clientData){try{var _clientData$services;const prompt=\"Create an optimized Google Business Profile description for:\\n\\nBusiness: \".concat(clientData.businessName,\"\\nIndustry: \").concat(clientData.industry,\"\\nLocation: \").concat(clientData.location,\"\\nServices: \").concat(((_clientData$services=clientData.services)===null||_clientData$services===void 0?void 0:_clientData$services.join(', '))||'various services',\"\\n\\nReturn JSON with:\\n{\\n  \\\"businessDescription\\\": \\\"compelling 750-char description\\\",\\n  \\\"services\\\": [\\\"service 1\\\", \\\"service 2\\\"],\\n  \\\"attributes\\\": [\\\"attribute1\\\", \\\"attribute2\\\"],\\n  \\\"posts\\\": [{\\\"title\\\": \\\"post title\\\", \\\"content\\\": \\\"post content\\\"}]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are a local SEO expert specializing in Google Business Profile optimization.'},{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.7},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return JSON.parse(response.data.choices[0].message.content);}catch(error){console.error('Error optimizing GBP:',error.message);return{};}}async generateLocalCitations(clientData){// List of local citation sites\nreturn{citations:[{site:'Yelp',url:'https://yelp.com',priority:'high',status:'pending'},{site:'Yellow Pages',url:'https://yellowpages.com',priority:'high',status:'pending'},{site:'Better Business Bureau',url:'https://bbb.org',priority:'medium',status:'pending'},{site:'Foursquare',url:'https://foursquare.com',priority:'medium',status:'pending'},{site:'Bing Places',url:'https://bingplaces.com',priority:'high',status:'pending'}],instructions:'Submit consistent NAP (Name, Address, Phone) across all platforms'};}async createLocalContent(clientData){var _clientData$services2;// Generate location-specific content ideas\nreturn{localPages:[\"\".concat(((_clientData$services2=clientData.services)===null||_clientData$services2===void 0?void 0:_clientData$services2[0])||'Services',\" in \").concat(clientData.location),\"Best \".concat(clientData.industry,\" near \").concat(clientData.location),\"\".concat(clientData.location,\" \").concat(clientData.industry,\" Guide\")],localBlogPosts:[\"Top 10 \".concat(clientData.industry,\" Tips for \").concat(clientData.location,\" Residents\"),\"\".concat(clientData.location,\" Community Guide\"),\"Why Choose \".concat(clientData.businessName,\" in \").concat(clientData.location)]};}async createReviewStrategy(clientData){return{platforms:['Google','Yelp','Facebook'],strategy:'Send review requests 3-5 days after service completion',emailTemplates:await this.generateReviewRequestTemplates(clientData),responseTemplates:await this.generateReviewResponseTemplates(clientData)};}async generateReviewRequestTemplates(clientData){try{const prompt=\"Create 3 friendly review request email templates for \".concat(clientData.businessName,\". Make them warm, appreciative, and include direct links to review platforms.\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'user',content:prompt}],temperature:0.8},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return response.data.choices[0].message.content;}catch(error){return'Error generating templates';}}async generateReviewResponseTemplates(clientData){return{positive:\"Thank you so much for your wonderful review! We're thrilled to hear about your positive experience with \".concat(clientData.businessName,\". We look forward to serving you again!\"),negative:\"Thank you for your feedback. We're sorry to hear about your experience. We'd love the opportunity to make this right. Please contact us directly at [contact info].\",neutral:\"Thank you for taking the time to leave a review. We appreciate your feedback and are always looking to improve our services.\"};}/**\n   * 7. SCHEMA MARKUP GENERATION\n   */async generateSchemaMarkup(clientData){console.log('  🏷️ Generating schema markup...');const schemas=[];// Organization schema\nschemas.push(this.createOrganizationSchema(clientData));// Local Business schema (if applicable)\nif(clientData.localBusiness){schemas.push(this.createLocalBusinessSchema(clientData));}// Article schema (for blog posts)\nschemas.push(this.createArticleSchemaTemplate(clientData));// FAQ schema\nschemas.push(await this.createFAQSchema(clientData));return{schemas,implementation:'Add these JSON-LD scripts to your website <head> section'};}createOrganizationSchema(clientData){return{\"@context\":\"https://schema.org\",\"@type\":\"Organization\",\"name\":clientData.businessName,\"url\":clientData.websiteUrl,\"logo\":clientData.logoUrl||'',\"description\":clientData.description||'',\"address\":{\"@type\":\"PostalAddress\",\"streetAddress\":clientData.address||'',\"addressLocality\":clientData.location||'',\"postalCode\":clientData.postalCode||'',\"addressCountry\":clientData.country||'US'},\"contactPoint\":{\"@type\":\"ContactPoint\",\"telephone\":clientData.phone||'',\"contactType\":\"customer service\"}};}createLocalBusinessSchema(clientData){return{\"@context\":\"https://schema.org\",\"@type\":\"LocalBusiness\",\"name\":clientData.businessName,\"image\":clientData.logoUrl||'',\"url\":clientData.websiteUrl,\"telephone\":clientData.phone||'',\"priceRange\":clientData.priceRange||'$$',\"address\":{\"@type\":\"PostalAddress\",\"streetAddress\":clientData.address||'',\"addressLocality\":clientData.location||'',\"postalCode\":clientData.postalCode||'',\"addressCountry\":clientData.country||'US'},\"geo\":{\"@type\":\"GeoCoordinates\",\"latitude\":clientData.latitude||0,\"longitude\":clientData.longitude||0},\"openingHoursSpecification\":clientData.hours||[]};}createArticleSchemaTemplate(clientData){return{template:'article',schema:{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"[ARTICLE_TITLE]\",\"image\":\"[ARTICLE_IMAGE_URL]\",\"author\":{\"@type\":\"Organization\",\"name\":clientData.businessName},\"publisher\":{\"@type\":\"Organization\",\"name\":clientData.businessName,\"logo\":{\"@type\":\"ImageObject\",\"url\":clientData.logoUrl||''}},\"datePublished\":\"[PUBLISH_DATE]\",\"dateModified\":\"[MODIFIED_DATE]\"}};}async createFAQSchema(clientData){try{const prompt=\"Generate 5 frequently asked questions and answers for \".concat(clientData.businessName,\" in the \").concat(clientData.industry,\" industry.\\n\\nReturn JSON with:\\n{\\n  \\\"faqs\\\": [\\n    {\\\"question\\\": \\\"question text\\\", \\\"answer\\\": \\\"detailed answer\\\"}\\n  ]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.7},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const faqs=JSON.parse(response.data.choices[0].message.content);return{\"@context\":\"https://schema.org\",\"@type\":\"FAQPage\",\"mainEntity\":faqs.faqs.map(faq=>({\"@type\":\"Question\",\"name\":faq.question,\"acceptedAnswer\":{\"@type\":\"Answer\",\"text\":faq.answer}}))};}catch(error){console.error('Error creating FAQ schema:',error.message);return null;}}/**\n   * 8. MONTHLY REPORT GENERATION\n   */async generateMonthlyReport(results){console.log('  📊 Generating comprehensive report...');try{var _results$deliverables,_results$deliverables2,_results$deliverables3,_results$deliverables4,_results$deliverables5,_results$deliverables6;const summaryPrompt=\"Create an executive summary for this month's SEO work:\\n\\nKeywords researched: \".concat(results.deliverables.keywords.totalKeywords,\"\\nContent created: \").concat(results.deliverables.content.totalArticles,\" articles (\").concat(results.deliverables.content.totalWords,\" words)\\nTechnical issues found: \").concat(results.deliverables.technicalAudit.issues.length,\"\\nLink building prospects: \").concat(((_results$deliverables=results.deliverables.linkBuilding)===null||_results$deliverables===void 0?void 0:(_results$deliverables2=_results$deliverables.prospects)===null||_results$deliverables2===void 0?void 0:_results$deliverables2.length)||0,\"\\n\\nWrite a professional 2-3 paragraph summary highlighting the value delivered.\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'system',content:'You are a professional SEO consultant writing client reports.'},{role:'user',content:summaryPrompt}],temperature:0.6},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});const executiveSummary=response.data.choices[0].message.content;return{reportDate:new Date().toISOString(),client:results.client.businessName,executiveSummary,keyMetrics:{keywordsResearched:results.deliverables.keywords.totalKeywords,contentPieces:results.deliverables.content.totalArticles,totalWords:results.deliverables.content.totalWords,technicalIssuesFound:results.deliverables.technicalAudit.issues.length,issuesFixed:0,// Track over time\nlinkProspects:((_results$deliverables3=results.deliverables.linkBuilding)===null||_results$deliverables3===void 0?void 0:(_results$deliverables4=_results$deliverables3.prospects)===null||_results$deliverables4===void 0?void 0:_results$deliverables4.length)||0,outreachEmailsSent:((_results$deliverables5=results.deliverables.linkBuilding)===null||_results$deliverables5===void 0?void 0:(_results$deliverables6=_results$deliverables5.outreachEmails)===null||_results$deliverables6===void 0?void 0:_results$deliverables6.length)||0},deliverables:results.deliverables,nextMonthPlan:await this.generateNextMonthPlan(results)};}catch(error){console.error('Error generating report:',error.message);return{reportDate:new Date().toISOString(),error:'Error generating report'};}}async generateNextMonthPlan(results){try{const prompt=\"Based on this month's SEO work, suggest a strategic plan for next month. Focus on building upon current progress and addressing gaps.\\n\\nCurrent progress:\\n- \".concat(results.deliverables.keywords.totalKeywords,\" keywords researched\\n- \").concat(results.deliverables.content.totalArticles,\" articles created\\n- \").concat(results.deliverables.technicalAudit.issues.length,\" technical issues identified\\n\\nReturn JSON with:\\n{\\n  \\\"priorities\\\": [\\\"priority 1\\\", \\\"priority 2\\\"],\\n  \\\"contentTopics\\\": [\\\"topic 1\\\", \\\"topic 2\\\"],\\n  \\\"technicalFocus\\\": [\\\"focus area 1\\\"],\\n  \\\"linkBuildingGoals\\\": [\\\"goal 1\\\"]\\n}\");const response=await axios.post(\"\".concat(this.openaiBaseUrl,\"/chat/completions\"),{model:'gpt-4-turbo-preview',messages:[{role:'user',content:prompt}],response_format:{type:'json_object'},temperature:0.7},{headers:{'Authorization':\"Bearer \".concat(this.openaiApiKey),'Content-Type':'application/json'}});return JSON.parse(response.data.choices[0].message.content);}catch(error){console.error('Error generating next month plan:',error.message);return{};}}// ========== HELPER METHODS ==========\ncalculateKeywordDensity(content,keyword){const words=content.toLowerCase().split(/\\s+/);const keywordWords=keyword.toLowerCase().split(/\\s+/);const keywordCount=words.filter(w=>keywordWords.includes(w)).length;return keywordCount/words.length;}calculateSEOScore(content,keyword){let score=0;// Keyword in content\nif(content.toLowerCase().includes(keyword.toLowerCase()))score+=20;// Word count (1500-2000 ideal)\nconst wordCount=content.split(' ').length;if(wordCount>=1500&&wordCount<=2500)score+=20;else if(wordCount>=1000)score+=10;// Headers present\nif(content.includes('##'))score+=15;if(content.includes('###'))score+=10;// Lists present\nif(content.includes('-')||content.includes('1.'))score+=10;// Keyword density (1.5-2.5% ideal)\nconst density=this.calculateKeywordDensity(content,keyword);if(density>=0.015&&density<=0.025)score+=25;else if(density>0)score+=10;return Math.min(score,100);}slugify(text){return text.toLowerCase().replace(/[^\\w\\s-]/g,'').replace(/\\s+/g,'-').replace(/-+/g,'-').trim();}groupByCluster(keywords){const clusters={};keywords.forEach(kw=>{const cluster=kw.cluster||'uncategorized';if(!clusters[cluster])clusters[cluster]=[];clusters[cluster].push(kw);});return clusters;}mapClustersToKeywords(clusters,keywords){return keywords.map(kw=>{const cluster=clusters.find(c=>c.keywords.some(ck=>ck.toLowerCase()===kw.keyword.toLowerCase()));return _objectSpread(_objectSpread({},kw),{},{cluster:(cluster===null||cluster===void 0?void 0:cluster.name)||'uncategorized',clusterIntent:(cluster===null||cluster===void 0?void 0:cluster.intent)||kw.intent});});}fallbackClustering(keywords){// Simple fallback clustering by intent\nreturn keywords.map(kw=>_objectSpread(_objectSpread({},kw),{},{cluster:kw.intent||'general'}));}getFallbackSeedKeywords(industry){return[{keyword:\"\".concat(industry,\" services\"),intent:'commercial'},{keyword:\"best \".concat(industry),intent:'informational'},{keyword:\"\".concat(industry,\" near me\"),intent:'transactional'},{keyword:\"how to choose \".concat(industry),intent:'informational'},{keyword:\"\".concat(industry,\" cost\"),intent:'commercial'}];}sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms));}}export default new AISEOService();","map":{"version":3,"names":["axios","AISEOService","constructor","openaiApiKey","process","env","REACT_APP_OPENAI_API_KEY","anthropicApiKey","REACT_APP_ANTHROPIC_API_KEY","perplexityApiKey","REACT_APP_PERPLEXITY_API_KEY","ahrefsApiKey","REACT_APP_AHREFS_API_KEY","semrushApiKey","REACT_APP_SEMRUSH_API_KEY","openaiBaseUrl","anthropicBaseUrl","perplexityBaseUrl","executeMonthlyService","clientData","console","log","businessName","results","client","timestamp","Date","toISOString","deliverables","keywords","performKeywordResearch","content","generateMonthlyContent","technicalAudit","performTechnicalAudit","websiteUrl","competitorAnalysis","analyzeCompetitors","industry","competitors","linkBuilding","generateLinkBuildingCampaign","localBusiness","localSEO","optimizeLocalSEO","schema","generateSchemaMarkup","report","generateMonthlyReport","error","location","businessType","targetAudience","seedKeywords","generateSeedKeywords","expandedKeywords","expandKeywords","keywordsWithMetrics","enrichKeywordsWithMetrics","clusteredKeywords","clusterKeywordsByIntent","prioritizedKeywords","prioritizeKeywords","totalKeywords","length","clusters","groupByCluster","topOpportunities","slice","contentIdeas","generateContentIdeas","prompt","concat","response","post","model","messages","role","response_format","type","temperature","headers","result","JSON","parse","data","choices","message","_error$response","getFallbackSeedKeywords","expansions","modifiers","forEach","seed","push","modifier","keyword","intent","map","kw","_objectSpread","searchVolume","Math","floor","random","difficulty","cpc","toFixed","trend","keywordList","k","join","mapClustersToKeywords","fallbackClustering","intentWeights","transactional","commercial","informational","navigational","priorityScore","sort","a","b","topKeywords","ideas","titles","keywordData","generatedContent","idea","title","article","generateBlogPost","sleep","totalArticles","articles","totalWords","reduce","sum","wordCount","relatedKeywords","research","researchTopic","targetKeyword","outline","createContentOutline","writeArticleContent","optimizedContent","optimizeContent","metadata","generateMetadata","split","readTime","ceil","seoScore","calculateSEOScore","generatedAt","contentType","substring","sections","outlineText","stringify","max_tokens","keywordDensity","calculateKeywordDensity","metaTitle","metaDescription","slug","slugify","audit","url","issues","recommendations","checks","checkPageSpeed","checkMobileResponsiveness","checkSSL","checkRobotsTxt","checkSitemap","checkStructuredData","Promise","allSettled","index","status","value","fixes","generateFixInstructions","severity","description","hasSSL","startsWith","robotsUrl","URL","href","get","issuesList","i","analysis","opportunities","threats","competitor","competitorData","analyzeCompetitor","insights","generateCompetitorInsights","competitorUrl","estimatedTraffic","position","backlinks","domainRating","contentGaps","campaign","targetKeywords","prospects","outreachEmails","findLinkProspects","prospect","email","generateOutreachEmail","types","domain","traffic","relevance","contactEmail","createdAt","googleBusinessProfile","optimizeGBP","localCitations","generateLocalCitations","localContent","createLocalContent","reviewStrategy","createReviewStrategy","_clientData$services","services","citations","site","priority","instructions","_clientData$services2","localPages","localBlogPosts","platforms","strategy","emailTemplates","generateReviewRequestTemplates","responseTemplates","generateReviewResponseTemplates","positive","negative","neutral","schemas","createOrganizationSchema","createLocalBusinessSchema","createArticleSchemaTemplate","createFAQSchema","implementation","logoUrl","address","postalCode","country","phone","priceRange","latitude","longitude","hours","template","faqs","faq","question","answer","_results$deliverables","_results$deliverables2","_results$deliverables3","_results$deliverables4","_results$deliverables5","_results$deliverables6","summaryPrompt","executiveSummary","reportDate","keyMetrics","keywordsResearched","contentPieces","technicalIssuesFound","issuesFixed","linkProspects","outreachEmailsSent","nextMonthPlan","generateNextMonthPlan","words","toLowerCase","keywordWords","keywordCount","filter","w","includes","score","density","min","text","replace","trim","cluster","find","c","some","ck","name","clusterIntent","ms","resolve","setTimeout"],"sources":["/Users/siteoptz/siteoptz-scraping/src/services/AISEOService.js"],"sourcesContent":["// AI-Powered SEO Service\n// Comprehensive SEO automation for white-label reselling\n\nimport axios from 'axios';\n\nclass AISEOService {\n  constructor() {\n    this.openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\n    this.anthropicApiKey = process.env.REACT_APP_ANTHROPIC_API_KEY;\n    this.perplexityApiKey = process.env.REACT_APP_PERPLEXITY_API_KEY;\n    this.ahrefsApiKey = process.env.REACT_APP_AHREFS_API_KEY;\n    this.semrushApiKey = process.env.REACT_APP_SEMRUSH_API_KEY;\n    \n    // Base URLs\n    this.openaiBaseUrl = 'https://api.openai.com/v1';\n    this.anthropicBaseUrl = 'https://api.anthropic.com/v1';\n    this.perplexityBaseUrl = 'https://api.perplexity.ai';\n  }\n\n  /**\n   * MAIN SERVICE METHOD\n   * Complete SEO service for one client/month\n   */\n  async executeMonthlyService(clientData) {\n    console.log('🚀 Starting AI-Powered SEO Service for:', clientData.businessName);\n\n    const results = {\n      client: clientData,\n      timestamp: new Date().toISOString(),\n      deliverables: {}\n    };\n\n    try {\n      // 1. Keyword Research & Clustering\n      console.log('📊 Step 1: AI Keyword Research...');\n      results.deliverables.keywords = await this.performKeywordResearch(clientData);\n\n      // 2. Content Generation (Blog Posts)\n      console.log('✍️ Step 2: Generating AI Content...');\n      results.deliverables.content = await this.generateMonthlyContent(\n        clientData,\n        results.deliverables.keywords\n      );\n\n      // 3. Technical SEO Audit\n      console.log('🔧 Step 3: Technical SEO Audit...');\n      results.deliverables.technicalAudit = await this.performTechnicalAudit(\n        clientData.websiteUrl\n      );\n\n      // 4. Competitor Analysis\n      console.log('🎯 Step 4: Competitor Analysis...');\n      results.deliverables.competitorAnalysis = await this.analyzeCompetitors(\n        clientData.industry,\n        clientData.competitors || []\n      );\n\n      // 5. Link Building Opportunities\n      console.log('🔗 Step 5: Link Building Strategy...');\n      results.deliverables.linkBuilding = await this.generateLinkBuildingCampaign(\n        clientData,\n        results.deliverables.keywords\n      );\n\n      // 6. Local SEO (if applicable)\n      if (clientData.localBusiness) {\n        console.log('📍 Step 6: Local SEO Optimization...');\n        results.deliverables.localSEO = await this.optimizeLocalSEO(clientData);\n      }\n\n      // 7. Schema Markup Generation\n      console.log('🏷️ Step 7: Schema Markup...');\n      results.deliverables.schema = await this.generateSchemaMarkup(clientData);\n\n      // 8. Monthly Report Generation\n      console.log('📈 Step 8: Generating Report...');\n      results.deliverables.report = await this.generateMonthlyReport(results);\n\n      console.log('✅ AI SEO Service Complete!');\n      return results;\n\n    } catch (error) {\n      console.error('❌ Error in AI SEO Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 1. AI KEYWORD RESEARCH\n   * Generate 100+ keywords with clustering and prioritization\n   */\n  async performKeywordResearch(clientData) {\n    const { industry, location, businessType, targetAudience } = clientData;\n\n    // Step 1: Generate seed keywords with GPT-4\n    const seedKeywords = await this.generateSeedKeywords(industry, businessType, targetAudience);\n\n    // Step 2: Expand keywords with variations\n    const expandedKeywords = await this.expandKeywords(seedKeywords);\n\n    // Step 3: Get search volume and difficulty (simulated or via API)\n    const keywordsWithMetrics = await this.enrichKeywordsWithMetrics(expandedKeywords);\n\n    // Step 4: Cluster keywords by intent\n    const clusteredKeywords = await this.clusterKeywordsByIntent(keywordsWithMetrics);\n\n    // Step 5: Prioritize keywords\n    const prioritizedKeywords = this.prioritizeKeywords(clusteredKeywords);\n\n    return {\n      totalKeywords: prioritizedKeywords.length,\n      clusters: this.groupByCluster(prioritizedKeywords),\n      topOpportunities: prioritizedKeywords.slice(0, 20),\n      contentIdeas: await this.generateContentIdeas(prioritizedKeywords)\n    };\n  }\n\n  async generateSeedKeywords(industry, businessType, targetAudience) {\n    try {\n      const prompt = `You are an expert SEO strategist. Generate a comprehensive list of seed keywords for a ${businessType} business in the ${industry} industry targeting ${targetAudience}.\n\nInclude:\n- Primary service/product keywords\n- Industry-specific terms\n- Problem-solution keywords\n- Comparison keywords\n- Question-based keywords\n- Long-tail variations\n\nFormat as a JSON array of objects with: {\"keyword\": \"example\", \"intent\": \"transactional|informational|navigational|commercial\"}\n\nGenerate 50 seed keywords.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert SEO and keyword research specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.keywords || [];\n    } catch (error) {\n      console.error('Error generating seed keywords:', error.response?.data || error.message);\n      // Return fallback keywords\n      return this.getFallbackSeedKeywords(industry);\n    }\n  }\n\n  async expandKeywords(seedKeywords) {\n    // Expand each seed keyword with variations\n    const expansions = [];\n    const modifiers = [\n      'best', 'top', 'affordable', 'near me', 'services', 'company',\n      'how to', 'what is', 'cost of', 'reviews', 'vs', 'guide'\n    ];\n\n    seedKeywords.forEach(seed => {\n      expansions.push(seed);\n      \n      // Add modifier variations\n      modifiers.forEach(modifier => {\n        expansions.push({\n          keyword: `${modifier} ${seed.keyword}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n        \n        expansions.push({\n          keyword: `${seed.keyword} ${modifier}`,\n          intent: seed.intent,\n          type: 'expanded'\n        });\n      });\n    });\n\n    return expansions.slice(0, 200); // Limit to 200 expanded keywords\n  }\n\n  async enrichKeywordsWithMetrics(keywords) {\n    // Simulate keyword metrics (in production, use Ahrefs/SEMrush API)\n    return keywords.map(kw => ({\n      ...kw,\n      searchVolume: Math.floor(Math.random() * 10000) + 100,\n      difficulty: Math.floor(Math.random() * 100),\n      cpc: (Math.random() * 10).toFixed(2),\n      trend: Math.random() > 0.5 ? 'up' : 'stable'\n    }));\n  }\n\n  async clusterKeywordsByIntent(keywords) {\n    try {\n      // Use GPT-4 to intelligently cluster keywords\n      const keywordList = keywords.slice(0, 100).map(k => k.keyword).join(', ');\n      \n      const prompt = `Analyze these keywords and group them into logical clusters based on user intent and topic similarity:\n\n${keywordList}\n\nReturn a JSON object with clusters like:\n{\n  \"clusters\": [\n    {\n      \"name\": \"cluster name\",\n      \"intent\": \"informational/transactional/commercial/navigational\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert SEO and keyword clustering specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.3\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const clusters = JSON.parse(response.data.choices[0].message.content);\n      \n      // Map back to full keyword objects\n      return this.mapClustersToKeywords(clusters.clusters, keywords);\n    } catch (error) {\n      console.error('Error clustering keywords:', error.message);\n      return this.fallbackClustering(keywords);\n    }\n  }\n\n  prioritizeKeywords(clusteredKeywords) {\n    // Calculate priority score: (SearchVolume / Difficulty) * Intent Weight\n    const intentWeights = {\n      transactional: 1.5,\n      commercial: 1.3,\n      informational: 1.0,\n      navigational: 0.8\n    };\n\n    return clusteredKeywords\n      .map(kw => ({\n        ...kw,\n        priorityScore: ((kw.searchVolume / (kw.difficulty + 1)) * \n                       (intentWeights[kw.intent] || 1))\n      }))\n      .sort((a, b) => b.priorityScore - a.priorityScore);\n  }\n\n  async generateContentIdeas(keywords) {\n    const topKeywords = keywords.slice(0, 10);\n    \n    try {\n      const prompt = `Based on these high-priority keywords, generate 20 blog post titles that would rank well:\n\n${topKeywords.map(k => `- ${k.keyword}`).join('\\n')}\n\nReturn a JSON array of objects with: {\"title\": \"Blog Title\", \"targetKeyword\": \"main keyword\", \"contentType\": \"how-to|guide|listicle|comparison|case-study\"}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content strategist and SEO specialist.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.ideas || result.titles || [];\n    } catch (error) {\n      console.error('Error generating content ideas:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 2. AI CONTENT GENERATION\n   * Generate 10-20 blog posts per month\n   */\n  async generateMonthlyContent(clientData, keywordData) {\n    const contentIdeas = keywordData.contentIdeas.slice(0, 15);\n    const generatedContent = [];\n\n    for (const idea of contentIdeas) {\n      try {\n        console.log(`  📝 Generating: \"${idea.title}\"`);\n        \n        const article = await this.generateBlogPost(\n          idea,\n          clientData,\n          keywordData.topOpportunities\n        );\n        \n        generatedContent.push(article);\n        \n        // Rate limiting: wait 2 seconds between articles\n        await this.sleep(2000);\n      } catch (error) {\n        console.error(`Error generating article \"${idea.title}\":`, error.message);\n      }\n    }\n\n    return {\n      totalArticles: generatedContent.length,\n      articles: generatedContent,\n      totalWords: generatedContent.reduce((sum, a) => sum + a.wordCount, 0)\n    };\n  }\n\n  async generateBlogPost(idea, clientData, relatedKeywords) {\n    try {\n      // Step 1: Research with Perplexity (if available) or GPT-4\n      const research = await this.researchTopic(idea.title, idea.targetKeyword);\n\n      // Step 2: Create outline\n      const outline = await this.createContentOutline(idea, research, relatedKeywords);\n\n      // Step 3: Generate full article with GPT-4\n      const content = await this.writeArticleContent(idea, outline, clientData, research);\n\n      // Step 4: Optimize for SEO\n      const optimizedContent = await this.optimizeContent(content, idea.targetKeyword);\n\n      // Step 5: Generate meta data\n      const metadata = await this.generateMetadata(idea, optimizedContent);\n\n      return {\n        title: idea.title,\n        targetKeyword: idea.targetKeyword,\n        content: optimizedContent,\n        outline: outline,\n        metadata: metadata,\n        wordCount: optimizedContent.split(' ').length,\n        readTime: Math.ceil(optimizedContent.split(' ').length / 200),\n        seoScore: this.calculateSEOScore(optimizedContent, idea.targetKeyword),\n        generatedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating blog post:', error.message);\n      throw error;\n    }\n  }\n\n  async researchTopic(title, keyword) {\n    try {\n      const prompt = `Research and provide key facts, statistics, and insights about: \"${title}\" focusing on the keyword \"${keyword}\". Include recent data, expert opinions, and actionable insights.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert researcher providing accurate, up-to-date information.' },\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.4\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error researching topic:', error.message);\n      return '';\n    }\n  }\n\n  async createContentOutline(idea, research, relatedKeywords) {\n    try {\n      const prompt = `Create a detailed blog post outline for: \"${idea.title}\"\n\nTarget keyword: ${idea.targetKeyword}\nContent type: ${idea.contentType}\nRelated keywords to include: ${relatedKeywords.slice(0, 5).map(k => k.keyword).join(', ')}\n\nResearch context: ${research.substring(0, 500)}\n\nReturn a JSON object with:\n{\n  \"introduction\": \"Hook and overview\",\n  \"sections\": [\n    {\"heading\": \"H2 heading\", \"subheadings\": [\"H3\", \"H3\"], \"keyPoints\": [\"point1\", \"point2\"]}\n  ],\n  \"conclusion\": \"Summary and CTA\"\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content strategist creating SEO-optimized outlines.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error creating outline:', error.message);\n      return { sections: [] };\n    }\n  }\n\n  async writeArticleContent(idea, outline, clientData, research) {\n    try {\n      const outlineText = JSON.stringify(outline, null, 2);\n      \n      const prompt = `Write a comprehensive, engaging blog post following this outline:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nBusiness Context: ${clientData.businessName} - ${clientData.industry}\n\nOutline:\n${outlineText}\n\nResearch:\n${research}\n\nRequirements:\n- 1500-2000 words\n- Conversational yet professional tone\n- Include the target keyword naturally (2-3% density)\n- Use short paragraphs (2-3 sentences)\n- Include transition words\n- Add bullet points and numbered lists\n- SEO-optimized headers (H2, H3)\n- Strong introduction with hook\n- Clear conclusion with CTA\n- Naturally mention ${clientData.businessName} where relevant\n\nWrite the complete article in markdown format.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert content writer specializing in SEO-optimized, engaging blog posts.' },\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.7,\n          max_tokens: 4000\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error writing article:', error.message);\n      return '';\n    }\n  }\n\n  async optimizeContent(content, targetKeyword) {\n    // Check keyword density\n    const keywordDensity = this.calculateKeywordDensity(content, targetKeyword);\n    \n    if (keywordDensity < 0.015) {\n      // Add keyword variations naturally\n      console.log(`  ⚠️ Low keyword density (${(keywordDensity * 100).toFixed(2)}%), optimizing...`);\n      // In production, use AI to naturally add keywords\n    }\n\n    // Add internal link placeholders\n    const optimizedContent = content + '\\n\\n[INTERNAL_LINK_PLACEHOLDER]';\n\n    return optimizedContent;\n  }\n\n  async generateMetadata(idea, content) {\n    try {\n      const prompt = `Generate SEO metadata for this article:\n\nTitle: ${idea.title}\nTarget Keyword: ${idea.targetKeyword}\nContent Preview: ${content.substring(0, 500)}...\n\nReturn JSON with:\n{\n  \"metaTitle\": \"60 chars max, includes target keyword\",\n  \"metaDescription\": \"150-160 chars, compelling, includes keyword\",\n  \"focusKeyword\": \"main keyword\",\n  \"slug\": \"url-friendly-slug\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an SEO expert creating compelling metadata.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating metadata:', error.message);\n      return {\n        metaTitle: idea.title,\n        metaDescription: '',\n        slug: this.slugify(idea.title)\n      };\n    }\n  }\n\n  /**\n   * 3. TECHNICAL SEO AUDIT\n   */\n  async performTechnicalAudit(websiteUrl) {\n    console.log(`  🔍 Auditing: ${websiteUrl}`);\n\n    const audit = {\n      url: websiteUrl,\n      timestamp: new Date().toISOString(),\n      issues: [],\n      recommendations: []\n    };\n\n    // Check various technical SEO factors\n    const checks = [\n      this.checkPageSpeed(websiteUrl),\n      this.checkMobileResponsiveness(websiteUrl),\n      this.checkSSL(websiteUrl),\n      this.checkRobotsTxt(websiteUrl),\n      this.checkSitemap(websiteUrl),\n      this.checkStructuredData(websiteUrl)\n    ];\n\n    const results = await Promise.allSettled(checks);\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        audit.issues.push(...result.value.issues);\n        audit.recommendations.push(...result.value.recommendations);\n      }\n    });\n\n    // Generate fix instructions with AI\n    audit.fixes = await this.generateFixInstructions(audit.issues);\n\n    return audit;\n  }\n\n  async checkPageSpeed(url) {\n    // Simulate page speed check (use PageSpeed Insights API in production)\n    return {\n      issues: [\n        { type: 'performance', severity: 'medium', description: 'Page load time exceeds 3 seconds' }\n      ],\n      recommendations: [\n        'Optimize images (use WebP format)',\n        'Minify CSS and JavaScript',\n        'Enable browser caching',\n        'Use a CDN'\n      ]\n    };\n  }\n\n  async checkMobileResponsiveness(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure viewport meta tag is present', 'Test on various devices']\n    };\n  }\n\n  async checkSSL(url) {\n    const hasSSL = url.startsWith('https://');\n    return {\n      issues: hasSSL ? [] : [{ type: 'security', severity: 'high', description: 'No SSL certificate detected' }],\n      recommendations: hasSSL ? [] : ['Install SSL certificate immediately']\n    };\n  }\n\n  async checkRobotsTxt(url) {\n    try {\n      const robotsUrl = new URL('/robots.txt', url).href;\n      await axios.get(robotsUrl);\n      return {\n        issues: [],\n        recommendations: ['Robots.txt found and accessible']\n      };\n    } catch (error) {\n      return {\n        issues: [{ type: 'indexability', severity: 'low', description: 'No robots.txt file found' }],\n        recommendations: ['Create a robots.txt file']\n      };\n    }\n  }\n\n  async checkSitemap(url) {\n    return {\n      issues: [],\n      recommendations: ['Ensure XML sitemap is submitted to Google Search Console']\n    };\n  }\n\n  async checkStructuredData(url) {\n    return {\n      issues: [],\n      recommendations: ['Add schema markup for better rich snippets']\n    };\n  }\n\n  async generateFixInstructions(issues) {\n    if (issues.length === 0) return [];\n\n    try {\n      const issuesList = issues.map(i => `- ${i.description}`).join('\\n');\n      \n      const prompt = `Provide step-by-step fix instructions for these technical SEO issues:\n\n${issuesList}\n\nReturn JSON array with:\n[\n  {\n    \"issue\": \"issue description\",\n    \"priority\": \"high|medium|low\",\n    \"steps\": [\"step 1\", \"step 2\"],\n    \"estimatedTime\": \"time to fix\"\n  }\n]`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a technical SEO expert providing actionable fix instructions.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.3\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const result = JSON.parse(response.data.choices[0].message.content);\n      return result.fixes || [];\n    } catch (error) {\n      console.error('Error generating fix instructions:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * 4. COMPETITOR ANALYSIS\n   */\n  async analyzeCompetitors(industry, competitors) {\n    console.log(`  🎯 Analyzing competitors in ${industry}...`);\n\n    const analysis = {\n      industry,\n      competitors: [],\n      opportunities: [],\n      threats: []\n    };\n\n    // Analyze each competitor\n    for (const competitor of competitors.slice(0, 3)) {\n      try {\n        const competitorData = await this.analyzeCompetitor(competitor);\n        analysis.competitors.push(competitorData);\n      } catch (error) {\n        console.error(`Error analyzing ${competitor}:`, error.message);\n      }\n    }\n\n    // Generate strategic insights\n    analysis.insights = await this.generateCompetitorInsights(analysis.competitors);\n    \n    return analysis;\n  }\n\n  async analyzeCompetitor(competitorUrl) {\n    // Simulate competitor analysis (use Ahrefs/SEMrush in production)\n    return {\n      url: competitorUrl,\n      estimatedTraffic: Math.floor(Math.random() * 100000) + 10000,\n      topKeywords: [\n        { keyword: 'example keyword 1', position: 3, searchVolume: 5000 },\n        { keyword: 'example keyword 2', position: 5, searchVolume: 3000 }\n      ],\n      backlinks: Math.floor(Math.random() * 10000) + 1000,\n      domainRating: Math.floor(Math.random() * 100),\n      contentGaps: []\n    };\n  }\n\n  async generateCompetitorInsights(competitors) {\n    try {\n      const competitorData = JSON.stringify(competitors, null, 2);\n      \n      const prompt = `Analyze these competitor SEO metrics and provide strategic insights:\n\n${competitorData}\n\nReturn JSON with:\n{\n  \"strengths\": [\"what competitors do well\"],\n  \"weaknesses\": [\"gaps we can exploit\"],\n  \"opportunities\": [\"specific actions to outrank them\"],\n  \"contentGaps\": [\"topics they rank for that we should target\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a competitive SEO analyst providing strategic insights.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating competitor insights:', error.message);\n      return {};\n    }\n  }\n\n  /**\n   * 5. LINK BUILDING AUTOMATION\n   */\n  async generateLinkBuildingCampaign(clientData, keywords) {\n    console.log('  🔗 Creating link building campaign...');\n\n    const campaign = {\n      targetKeywords: keywords.topOpportunities.slice(0, 5),\n      prospects: [],\n      outreachEmails: []\n    };\n\n    // Find link prospects\n    campaign.prospects = await this.findLinkProspects(clientData.industry, keywords);\n\n    // Generate outreach emails\n    for (const prospect of campaign.prospects.slice(0, 10)) {\n      const email = await this.generateOutreachEmail(prospect, clientData);\n      campaign.outreachEmails.push(email);\n    }\n\n    return campaign;\n  }\n\n  async findLinkProspects(industry, keywords) {\n    // Simulate finding link prospects (use Ahrefs/Hunter.io in production)\n    const prospects = [];\n    const types = ['blog', 'news site', 'industry publication', 'resource page'];\n\n    for (let i = 0; i < 20; i++) {\n      prospects.push({\n        domain: `example-site-${i}.com`,\n        type: types[Math.floor(Math.random() * types.length)],\n        domainRating: Math.floor(Math.random() * 100),\n        traffic: Math.floor(Math.random() * 50000) + 1000,\n        relevance: Math.random(),\n        contactEmail: `editor@example-site-${i}.com`\n      });\n    }\n\n    return prospects.sort((a, b) => b.relevance - a.relevance);\n  }\n\n  async generateOutreachEmail(prospect, clientData) {\n    try {\n      const prompt = `Write a personalized link building outreach email for:\n\nProspect: ${prospect.domain} (${prospect.type})\nOur Business: ${clientData.businessName} - ${clientData.industry}\n\nRequirements:\n- Personalized subject line\n- Brief, friendly introduction\n- Value proposition (why link to us)\n- Specific content to link to\n- Clear call-to-action\n- Professional signature\n- Keep under 150 words\n\nReturn JSON with:\n{\n  \"subject\": \"email subject\",\n  \"body\": \"email body\",\n  \"followUp\": \"follow-up email if no response\"\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are an expert at writing persuasive, personalized outreach emails.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const email = JSON.parse(response.data.choices[0].message.content);\n      return {\n        prospect,\n        ...email,\n        status: 'draft',\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error generating outreach email:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 6. LOCAL SEO OPTIMIZATION\n   */\n  async optimizeLocalSEO(clientData) {\n    console.log('  📍 Optimizing local SEO...');\n\n    return {\n      googleBusinessProfile: await this.optimizeGBP(clientData),\n      localCitations: await this.generateLocalCitations(clientData),\n      localContent: await this.createLocalContent(clientData),\n      reviewStrategy: await this.createReviewStrategy(clientData)\n    };\n  }\n\n  async optimizeGBP(clientData) {\n    try {\n      const prompt = `Create an optimized Google Business Profile description for:\n\nBusiness: ${clientData.businessName}\nIndustry: ${clientData.industry}\nLocation: ${clientData.location}\nServices: ${clientData.services?.join(', ') || 'various services'}\n\nReturn JSON with:\n{\n  \"businessDescription\": \"compelling 750-char description\",\n  \"services\": [\"service 1\", \"service 2\"],\n  \"attributes\": [\"attribute1\", \"attribute2\"],\n  \"posts\": [{\"title\": \"post title\", \"content\": \"post content\"}]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a local SEO expert specializing in Google Business Profile optimization.' },\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error optimizing GBP:', error.message);\n      return {};\n    }\n  }\n\n  async generateLocalCitations(clientData) {\n    // List of local citation sites\n    return {\n      citations: [\n        { site: 'Yelp', url: 'https://yelp.com', priority: 'high', status: 'pending' },\n        { site: 'Yellow Pages', url: 'https://yellowpages.com', priority: 'high', status: 'pending' },\n        { site: 'Better Business Bureau', url: 'https://bbb.org', priority: 'medium', status: 'pending' },\n        { site: 'Foursquare', url: 'https://foursquare.com', priority: 'medium', status: 'pending' },\n        { site: 'Bing Places', url: 'https://bingplaces.com', priority: 'high', status: 'pending' }\n      ],\n      instructions: 'Submit consistent NAP (Name, Address, Phone) across all platforms'\n    };\n  }\n\n  async createLocalContent(clientData) {\n    // Generate location-specific content ideas\n    return {\n      localPages: [\n        `${clientData.services?.[0] || 'Services'} in ${clientData.location}`,\n        `Best ${clientData.industry} near ${clientData.location}`,\n        `${clientData.location} ${clientData.industry} Guide`\n      ],\n      localBlogPosts: [\n        `Top 10 ${clientData.industry} Tips for ${clientData.location} Residents`,\n        `${clientData.location} Community Guide`,\n        `Why Choose ${clientData.businessName} in ${clientData.location}`\n      ]\n    };\n  }\n\n  async createReviewStrategy(clientData) {\n    return {\n      platforms: ['Google', 'Yelp', 'Facebook'],\n      strategy: 'Send review requests 3-5 days after service completion',\n      emailTemplates: await this.generateReviewRequestTemplates(clientData),\n      responseTemplates: await this.generateReviewResponseTemplates(clientData)\n    };\n  }\n\n  async generateReviewRequestTemplates(clientData) {\n    try {\n      const prompt = `Create 3 friendly review request email templates for ${clientData.businessName}. Make them warm, appreciative, and include direct links to review platforms.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.8\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      return 'Error generating templates';\n    }\n  }\n\n  async generateReviewResponseTemplates(clientData) {\n    return {\n      positive: `Thank you so much for your wonderful review! We're thrilled to hear about your positive experience with ${clientData.businessName}. We look forward to serving you again!`,\n      negative: `Thank you for your feedback. We're sorry to hear about your experience. We'd love the opportunity to make this right. Please contact us directly at [contact info].`,\n      neutral: `Thank you for taking the time to leave a review. We appreciate your feedback and are always looking to improve our services.`\n    };\n  }\n\n  /**\n   * 7. SCHEMA MARKUP GENERATION\n   */\n  async generateSchemaMarkup(clientData) {\n    console.log('  🏷️ Generating schema markup...');\n\n    const schemas = [];\n\n    // Organization schema\n    schemas.push(this.createOrganizationSchema(clientData));\n\n    // Local Business schema (if applicable)\n    if (clientData.localBusiness) {\n      schemas.push(this.createLocalBusinessSchema(clientData));\n    }\n\n    // Article schema (for blog posts)\n    schemas.push(this.createArticleSchemaTemplate(clientData));\n\n    // FAQ schema\n    schemas.push(await this.createFAQSchema(clientData));\n\n    return {\n      schemas,\n      implementation: 'Add these JSON-LD scripts to your website <head> section'\n    };\n  }\n\n  createOrganizationSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      \"name\": clientData.businessName,\n      \"url\": clientData.websiteUrl,\n      \"logo\": clientData.logoUrl || '',\n      \"description\": clientData.description || '',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"contactPoint\": {\n        \"@type\": \"ContactPoint\",\n        \"telephone\": clientData.phone || '',\n        \"contactType\": \"customer service\"\n      }\n    };\n  }\n\n  createLocalBusinessSchema(clientData) {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"LocalBusiness\",\n      \"name\": clientData.businessName,\n      \"image\": clientData.logoUrl || '',\n      \"url\": clientData.websiteUrl,\n      \"telephone\": clientData.phone || '',\n      \"priceRange\": clientData.priceRange || '$$',\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": clientData.address || '',\n        \"addressLocality\": clientData.location || '',\n        \"postalCode\": clientData.postalCode || '',\n        \"addressCountry\": clientData.country || 'US'\n      },\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": clientData.latitude || 0,\n        \"longitude\": clientData.longitude || 0\n      },\n      \"openingHoursSpecification\": clientData.hours || []\n    };\n  }\n\n  createArticleSchemaTemplate(clientData) {\n    return {\n      template: 'article',\n      schema: {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Article\",\n        \"headline\": \"[ARTICLE_TITLE]\",\n        \"image\": \"[ARTICLE_IMAGE_URL]\",\n        \"author\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName\n        },\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"name\": clientData.businessName,\n          \"logo\": {\n            \"@type\": \"ImageObject\",\n            \"url\": clientData.logoUrl || ''\n          }\n        },\n        \"datePublished\": \"[PUBLISH_DATE]\",\n        \"dateModified\": \"[MODIFIED_DATE]\"\n      }\n    };\n  }\n\n  async createFAQSchema(clientData) {\n    try {\n      const prompt = `Generate 5 frequently asked questions and answers for ${clientData.businessName} in the ${clientData.industry} industry.\n\nReturn JSON with:\n{\n  \"faqs\": [\n    {\"question\": \"question text\", \"answer\": \"detailed answer\"}\n  ]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const faqs = JSON.parse(response.data.choices[0].message.content);\n\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"FAQPage\",\n        \"mainEntity\": faqs.faqs.map(faq => ({\n          \"@type\": \"Question\",\n          \"name\": faq.question,\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": faq.answer\n          }\n        }))\n      };\n    } catch (error) {\n      console.error('Error creating FAQ schema:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 8. MONTHLY REPORT GENERATION\n   */\n  async generateMonthlyReport(results) {\n    console.log('  📊 Generating comprehensive report...');\n\n    try {\n      const summaryPrompt = `Create an executive summary for this month's SEO work:\n\nKeywords researched: ${results.deliverables.keywords.totalKeywords}\nContent created: ${results.deliverables.content.totalArticles} articles (${results.deliverables.content.totalWords} words)\nTechnical issues found: ${results.deliverables.technicalAudit.issues.length}\nLink building prospects: ${results.deliverables.linkBuilding?.prospects?.length || 0}\n\nWrite a professional 2-3 paragraph summary highlighting the value delivered.`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'system', content: 'You are a professional SEO consultant writing client reports.' },\n            { role: 'user', content: summaryPrompt }\n          ],\n          temperature: 0.6\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const executiveSummary = response.data.choices[0].message.content;\n\n      return {\n        reportDate: new Date().toISOString(),\n        client: results.client.businessName,\n        executiveSummary,\n        keyMetrics: {\n          keywordsResearched: results.deliverables.keywords.totalKeywords,\n          contentPieces: results.deliverables.content.totalArticles,\n          totalWords: results.deliverables.content.totalWords,\n          technicalIssuesFound: results.deliverables.technicalAudit.issues.length,\n          issuesFixed: 0, // Track over time\n          linkProspects: results.deliverables.linkBuilding?.prospects?.length || 0,\n          outreachEmailsSent: results.deliverables.linkBuilding?.outreachEmails?.length || 0\n        },\n        deliverables: results.deliverables,\n        nextMonthPlan: await this.generateNextMonthPlan(results)\n      };\n    } catch (error) {\n      console.error('Error generating report:', error.message);\n      return {\n        reportDate: new Date().toISOString(),\n        error: 'Error generating report'\n      };\n    }\n  }\n\n  async generateNextMonthPlan(results) {\n    try {\n      const prompt = `Based on this month's SEO work, suggest a strategic plan for next month. Focus on building upon current progress and addressing gaps.\n\nCurrent progress:\n- ${results.deliverables.keywords.totalKeywords} keywords researched\n- ${results.deliverables.content.totalArticles} articles created\n- ${results.deliverables.technicalAudit.issues.length} technical issues identified\n\nReturn JSON with:\n{\n  \"priorities\": [\"priority 1\", \"priority 2\"],\n  \"contentTopics\": [\"topic 1\", \"topic 2\"],\n  \"technicalFocus\": [\"focus area 1\"],\n  \"linkBuildingGoals\": [\"goal 1\"]\n}`;\n\n      const response = await axios.post(\n        `${this.openaiBaseUrl}/chat/completions`,\n        {\n          model: 'gpt-4-turbo-preview',\n          messages: [\n            { role: 'user', content: prompt }\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.7\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.openaiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      return JSON.parse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating next month plan:', error.message);\n      return {};\n    }\n  }\n\n  // ========== HELPER METHODS ==========\n\n  calculateKeywordDensity(content, keyword) {\n    const words = content.toLowerCase().split(/\\s+/);\n    const keywordWords = keyword.toLowerCase().split(/\\s+/);\n    const keywordCount = words.filter(w => keywordWords.includes(w)).length;\n    return keywordCount / words.length;\n  }\n\n  calculateSEOScore(content, keyword) {\n    let score = 0;\n    \n    // Keyword in content\n    if (content.toLowerCase().includes(keyword.toLowerCase())) score += 20;\n    \n    // Word count (1500-2000 ideal)\n    const wordCount = content.split(' ').length;\n    if (wordCount >= 1500 && wordCount <= 2500) score += 20;\n    else if (wordCount >= 1000) score += 10;\n    \n    // Headers present\n    if (content.includes('##')) score += 15;\n    if (content.includes('###')) score += 10;\n    \n    // Lists present\n    if (content.includes('-') || content.includes('1.')) score += 10;\n    \n    // Keyword density (1.5-2.5% ideal)\n    const density = this.calculateKeywordDensity(content, keyword);\n    if (density >= 0.015 && density <= 0.025) score += 25;\n    else if (density > 0) score += 10;\n    \n    return Math.min(score, 100);\n  }\n\n  slugify(text) {\n    return text\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  }\n\n  groupByCluster(keywords) {\n    const clusters = {};\n    keywords.forEach(kw => {\n      const cluster = kw.cluster || 'uncategorized';\n      if (!clusters[cluster]) clusters[cluster] = [];\n      clusters[cluster].push(kw);\n    });\n    return clusters;\n  }\n\n  mapClustersToKeywords(clusters, keywords) {\n    return keywords.map(kw => {\n      const cluster = clusters.find(c => \n        c.keywords.some(ck => ck.toLowerCase() === kw.keyword.toLowerCase())\n      );\n      return {\n        ...kw,\n        cluster: cluster?.name || 'uncategorized',\n        clusterIntent: cluster?.intent || kw.intent\n      };\n    });\n  }\n\n  fallbackClustering(keywords) {\n    // Simple fallback clustering by intent\n    return keywords.map(kw => ({\n      ...kw,\n      cluster: kw.intent || 'general'\n    }));\n  }\n\n  getFallbackSeedKeywords(industry) {\n    return [\n      { keyword: `${industry} services`, intent: 'commercial' },\n      { keyword: `best ${industry}`, intent: 'informational' },\n      { keyword: `${industry} near me`, intent: 'transactional' },\n      { keyword: `how to choose ${industry}`, intent: 'informational' },\n      { keyword: `${industry} cost`, intent: 'commercial' }\n    ];\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nexport default new AISEOService();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}